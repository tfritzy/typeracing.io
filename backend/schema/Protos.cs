// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8600, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Schema {

  /// <summary>Holder for reflection information generated from protos.proto</summary>
  public static partial class ProtosReflection {

    #region Descriptor
    /// <summary>File descriptor for protos.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtosReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxwcm90b3MucHJvdG8SBlNjaGVtYSJICgxJbkdhbWVQbGF5ZXISDAoEbmFt",
            "ZRgBIAEoCRIKCgJpZBgCIAEoCRIOCgZpc19ib3QYAyABKAgSDgoGaXNfeW91",
            "GAQgASgIIp4BCgxPbmVvZlJlcXVlc3QSEQoJc2VuZGVyX2lkGAEgASgJEhQK",
            "DHNlbmRlcl90b2tlbhgCIAEoCRIsCglmaW5kX2dhbWUYAyABKAsyFy5TY2hl",
            "bWEuRmluZEdhbWVSZXF1ZXN0SAASLAoJdHlwZV93b3JkGAQgASgLMhcuU2No",
            "ZW1hLlR5cGVXb3JkUmVxdWVzdEgAQgkKB3JlcXVlc3QiYgoPRmluZEdhbWVS",
            "ZXF1ZXN0EhMKC3BsYXllcl9uYW1lGAEgASgJEiQKCmdhbWVfbW9kZXMYAiAD",
            "KA4yEC5TY2hlbWEuR2FtZU1vZGUSFAoMcHJpdmF0ZV9nYW1lGAMgASgIIiwK",
            "CUtleVN0cm9rZRIRCgljaGFyYWN0ZXIYASABKAkSDAoEdGltZRgCIAEoAiJb",
            "Cg9UeXBlV29yZFJlcXVlc3QSDAoEd29yZBgBIAEoCRImCgtrZXlfc3Ryb2tl",
            "cxgCIAMoCzIRLlNjaGVtYS5LZXlTdHJva2USEgoKbnVtX2Vycm9ycxgDIAEo",
            "BSLaAwoLT25lb2ZVcGRhdGUSFAoMcmVjaXBpZW50X2lkGAEgASgJEg8KB2dh",
            "bWVfaWQYAiABKAkSJQoJZ2FtZV9vdmVyGAMgASgLMhAuU2NoZW1hLkdhbWVP",
            "dmVySAASKwoMZ2FtZV9zdGFydGVkGAQgASgLMhMuU2NoZW1hLkdhbWVTdGFy",
            "dGVkSAASLQoNZ2FtZV9zdGFydGluZxgFIAEoCzIULlNjaGVtYS5HYW1lU3Rh",
            "cnRpbmdIABIzChBwbGF5ZXJfY29tcGxldGVkGAYgASgLMhcuU2NoZW1hLlBs",
            "YXllckNvbXBsZXRlZEgAEjYKEnBsYXllcl9qb2luZWRfZ2FtZRgHIAEoCzIY",
            "LlNjaGVtYS5QbGF5ZXJKb2luZWRHYW1lSAASLQoNd29yZF9maW5pc2hlZBgI",
            "IAEoCzIULlNjaGVtYS5Xb3JkRmluaXNoZWRIABJAChh5b3V2ZV9iZWVuX2Fk",
            "ZGVkX3RvX2dhbWUYCSABKAsyHC5TY2hlbWEuWW91dmVCZWVuQWRkZWRUb0dh",
            "bWVIABI5ChNwbGF5ZXJfZGlzY29ubmVjdGVkGAogASgLMhouU2NoZW1hLlBs",
            "YXllckRpc2Nvbm5lY3RlZEgAQggKBnVwZGF0ZSIeCghHYW1lT3ZlchISCgpl",
            "bmRfdGltZV9zGAEgASgCIg0KC0dhbWVTdGFydGVkIiEKDEdhbWVTdGFydGlu",
            "ZxIRCgljb3VudGRvd24YASABKAIiMQoMRXJyb3JzQXRUaW1lEgwKBHRpbWUY",
            "ASABKAISEwoLZXJyb3JfY291bnQYAiABKAUi5gEKD1BsYXllckNvbXBsZXRl",
            "ZBIRCglwbGF5ZXJfaWQYASABKAkSDQoFcGxhY2UYAiABKAUSGQoRcmF3X3dw",
            "bV9ieV9zZWNvbmQYAyADKAISFQoNd3BtX2J5X3NlY29uZBgEIAMoAhILCgN3",
            "cG0YBSABKAISEAoIYWNjdXJhY3kYBiABKAISHgoEbW9kZRgHIAEoDjIQLlNj",
            "aGVtYS5HYW1lTW9kZRIsCg5lcnJvcnNfYXRfdGltZRgIIAMoCzIULlNjaGVt",
            "YS5FcnJvcnNBdFRpbWUSEgoKbnVtX2Vycm9ycxgJIAEoBSJJChBQbGF5ZXJK",
            "b2luZWRHYW1lEiQKBnBsYXllchgBIAEoCzIULlNjaGVtYS5JbkdhbWVQbGF5",
            "ZXISDwoHZ2FtZV9pZBgCIAEoCSKTAQoMV29yZEZpbmlzaGVkEhEKCXBsYXll",
            "cl9pZBgBIAEoCRIYChBwZXJjZW50X2NvbXBsZXRlGAIgASgCEhUKDXZlbG9j",
            "aXR5X2ttX3MYAyABKAISEwoLcG9zaXRpb25fa20YBCABKAISHQoVY2hhcl9j",
            "b21wbGV0aW9uX3RpbWVzGAUgAygCEgsKA3dwbRgGIAEoAiJmChRZb3V2ZUJl",
            "ZW5BZGRlZFRvR2FtZRIPCgdnYW1lX2lkGAEgASgJEi0KD2N1cnJlbnRfcGxh",
            "eWVycxgCIAMoCzIULlNjaGVtYS5JbkdhbWVQbGF5ZXISDgoGcGhyYXNlGAMg",
            "ASgJIkgKElBsYXllckRpc2Nvbm5lY3RlZBIRCglwbGF5ZXJfaWQYASABKAkS",
            "DwoHcmVtb3ZlZBgCIAEoCBIOCgZpc195b3UYAyABKAgisQEKCVRpbWVUcmlh",
            "bBIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEg4KBnBocmFzZRgDIAEoCRI0",
            "CgpnbG9iYWxfd3BtGAQgAygLMiAuU2NoZW1hLlRpbWVUcmlhbC5HbG9iYWxX",
            "cG1FbnRyeRISCgpkaWZmaWN1bHR5GAUgASgFGjAKDkdsb2JhbFdwbUVudHJ5",
            "EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiSAoWTGlzdFRpbWVU",
            "cmlhbHNSZXNwb25zZRIuCgt0aW1lX3RyaWFscxgBIAMoCzIZLlNjaGVtYS5U",
            "aW1lVHJpYWxMaXN0SXRlbSKAAQoRVGltZVRyaWFsTGlzdEl0ZW0SCgoCaWQY",
            "ASABKAkSDAoEbmFtZRgCIAEoCRIOCgZsZW5ndGgYAyABKAUSDAoEdGltZRgE",
            "IAEoAhISCgpwZXJjZW50aWxlGAUgASgCEgsKA3dwbRgGIAEoAhISCgpkaWZm",
            "aWN1bHR5GAcgASgFIoQBCg9UaW1lVHJpYWxSZXN1bHQSCgoCaWQYASABKAkS",
            "EQoJcGxheWVyX2lkGAIgASgJEhAKCGJlc3Rfd3BtGAMgASgCEhQKDGF0dGVt",
            "cHRfd3BtcxgEIAMoAhIqCg9iZXN0X2tleXN0cm9rZXMYBSADKAsyES5TY2hl",
            "bWEuS2V5U3Ryb2tlIksKFlJlcG9ydFRpbWVUcmlhbFJlcXVlc3QSCgoCaWQY",
            "ASABKAkSJQoKa2V5c3Ryb2tlcxgCIAMoCzIRLlNjaGVtYS5LZXlTdHJva2Ui",
            "lAUKF1JlcG9ydFRpbWVUcmlhbFJlc3BvbnNlEgwKBHRpbWUYASABKAISCwoD",
            "d3BtGAIgASgCEhAKCGFjY3VyYWN5GAMgASgCEhUKDWJlc3RfcnVuX3RpbWUY",
            "BCABKAISFAoMYmVzdF9ydW5fd3BtGAUgASgCEhkKEWJlc3RfcnVuX2FjY3Vy",
            "YWN5GAYgASgCEhkKEXJhd193cG1fYnlfc2Vjb25kGAcgAygCEhUKDXdwbV9i",
            "eV9zZWNvbmQYCCADKAISLAoOZXJyb3JzX2F0X3RpbWUYCSADKAsyFC5TY2hl",
            "bWEuRXJyb3JzQXRUaW1lEkYKDGdsb2JhbF90aW1lcxgKIAMoCzIwLlNjaGVt",
            "YS5SZXBvcnRUaW1lVHJpYWxSZXNwb25zZS5HbG9iYWxUaW1lc0VudHJ5EkIK",
            "Cmdsb2JhbF93cG0YCyADKAsyLi5TY2hlbWEuUmVwb3J0VGltZVRyaWFsUmVz",
            "cG9uc2UuR2xvYmFsV3BtRW50cnkSEgoKbnVtX2Vycm9ycxgMIAEoBRIQCghw",
            "OTlfdGltZRgNIAEoAhIQCghwOTBfdGltZRgOIAEoAhIQCghwNTBfdGltZRgP",
            "IAEoAhIQCghwMjVfdGltZRgQIAEoAhIPCgdwOTlfd3BtGBEgASgCEg8KB3A5",
            "MF93cG0YEiABKAISDwoHcDUwX3dwbRgTIAEoAhIPCgdwMjVfd3BtGBQgASgC",
            "EhIKCnBlcmNlbnRpbGUYFSABKAIaMgoQR2xvYmFsVGltZXNFbnRyeRILCgNr",
            "ZXkYASABKAkSDQoFdmFsdWUYAiABKAU6AjgBGjAKDkdsb2JhbFdwbUVudHJ5",
            "EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiZAoVQXV0aGVudGlj",
            "YXRlZEF1dGhJbmZvEhAKCHByb3ZpZGVyGAEgASgJEhMKC2V4dGVybmFsX2lk",
            "GAIgASgJEg0KBWVtYWlsGAMgASgJEhUKDWxhc3RfbG9naW5fYXQYBCABKAEi",
            "OQoMQW5vbkF1dGhJbmZvEhIKCmF1dGhfdG9rZW4YASABKAkSFQoNbGFzdF9s",
            "b2dpbl9hdBgCIAEoASK7AQoGUGxheWVyEgoKAmlkGAEgASgJEiQKBHR5cGUY",
            "AiABKA4yFi5TY2hlbWEuUGxheWVyQXV0aFR5cGUSEQoJY3JlYXRlZF9zGAMg",
            "ASgBEj4KF2F1dGhlbnRpY2F0ZWRfYXV0aF9pbmZvGAQgASgLMh0uU2NoZW1h",
            "LkF1dGhlbnRpY2F0ZWRBdXRoSW5mbxIsCg5hbm9uX2F1dGhfaW5mbxgFIAEo",
            "CzIULlNjaGVtYS5Bbm9uQXV0aEluZm8q/AEKCEdhbWVNb2RlEgsKB0ludmFs",
            "aWQQABIOCgpNb3N0Q29tbW9uEAESCgoGQ29tbW9uEAISDgoKRGljdGlvbmFy",
            "eRADEg8KC0xlYXN0Q29tbW9uEAQSDgoKQ29weVBhc3RhcxAFEgsKB1NwYW1U",
            "YXAQBhILCgdOdW1iZXJzEAcSDAoITWFyYXRob24QCBILCgdIb21lUm93EAkS",
            "DAoIVXBwZXJSb3cQChINCglSaWdodEhhbmQQCxIMCghMZWZ0SGFuZBAMEhMK",
            "D0FsdGVybmF0aW5nSGFuZBANEg0KCUZha2VXb3JkcxAOEhIKDkxvbmdlc3RI",
            "dW5kcmVkEA8qRwoOUGxheWVyQXV0aFR5cGUSEwoPSW52YWxpZEF1dGhUeXBl",
            "EAASDQoJQW5vbnltb3VzEAESEQoNQXV0aGVudGljYXRlZBACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Schema.GameMode), typeof(global::Schema.PlayerAuthType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.InGamePlayer), global::Schema.InGamePlayer.Parser, new[]{ "Name", "id", "IsBot", "IsYou" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.OneofRequest), global::Schema.OneofRequest.Parser, new[]{ "SenderId", "SenderToken", "FindGame", "TypeWord" }, new[]{ "Request" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.FindGameRequest), global::Schema.FindGameRequest.Parser, new[]{ "PlayerName", "GameModes", "PrivateGame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.KeyStroke), global::Schema.KeyStroke.Parser, new[]{ "Character", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.TypeWordRequest), global::Schema.TypeWordRequest.Parser, new[]{ "Word", "KeyStrokes", "NumErrors" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.OneofUpdate), global::Schema.OneofUpdate.Parser, new[]{ "RecipientId", "GameId", "GameOver", "GameStarted", "GameStarting", "PlayerCompleted", "PlayerJoinedGame", "WordFinished", "YouveBeenAddedToGame", "PlayerDisconnected" }, new[]{ "Update" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.GameOver), global::Schema.GameOver.Parser, new[]{ "EndTimeS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.GameStarted), global::Schema.GameStarted.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.GameStarting), global::Schema.GameStarting.Parser, new[]{ "Countdown" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.ErrorsAtTime), global::Schema.ErrorsAtTime.Parser, new[]{ "Time", "ErrorCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.PlayerCompleted), global::Schema.PlayerCompleted.Parser, new[]{ "PlayerId", "Place", "RawWpmBySecond", "WpmBySecond", "Wpm", "Accuracy", "Mode", "ErrorsAtTime", "NumErrors" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.PlayerJoinedGame), global::Schema.PlayerJoinedGame.Parser, new[]{ "Player", "GameId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.WordFinished), global::Schema.WordFinished.Parser, new[]{ "PlayerId", "PercentComplete", "VelocityKmS", "PositionKm", "CharCompletionTimes", "Wpm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.YouveBeenAddedToGame), global::Schema.YouveBeenAddedToGame.Parser, new[]{ "GameId", "CurrentPlayers", "Phrase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.PlayerDisconnected), global::Schema.PlayerDisconnected.Parser, new[]{ "PlayerId", "Removed", "IsYou" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.TimeTrial), global::Schema.TimeTrial.Parser, new[]{ "id", "Name", "Phrase", "GlobalWpm", "Difficulty" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.ListTimeTrialsResponse), global::Schema.ListTimeTrialsResponse.Parser, new[]{ "TimeTrials" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.TimeTrialListItem), global::Schema.TimeTrialListItem.Parser, new[]{ "id", "Name", "Length", "Time", "Percentile", "Wpm", "Difficulty" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.TimeTrialResult), global::Schema.TimeTrialResult.Parser, new[]{ "id", "PlayerId", "BestWpm", "AttemptWpms", "BestKeystrokes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.ReportTimeTrialRequest), global::Schema.ReportTimeTrialRequest.Parser, new[]{ "id", "Keystrokes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.ReportTimeTrialResponse), global::Schema.ReportTimeTrialResponse.Parser, new[]{ "Time", "Wpm", "Accuracy", "BestRunTime", "BestRunWpm", "BestRunAccuracy", "RawWpmBySecond", "WpmBySecond", "ErrorsAtTime", "GlobalTimes", "GlobalWpm", "NumErrors", "P99Time", "P90Time", "P50Time", "P25Time", "P99Wpm", "P90Wpm", "P50Wpm", "P25Wpm", "Percentile" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.AuthenticatedAuthInfo), global::Schema.AuthenticatedAuthInfo.Parser, new[]{ "Provider", "ExternalId", "Email", "LastLoginAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.AnonAuthInfo), global::Schema.AnonAuthInfo.Parser, new[]{ "AuthToken", "LastLoginAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.Player), global::Schema.Player.Parser, new[]{ "id", "Type", "CreatedS", "AuthenticatedAuthInfo", "AnonAuthInfo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum GameMode {
    [pbr::OriginalName("Invalid")] Invalid = 0,
    [pbr::OriginalName("MostCommon")] MostCommon = 1,
    [pbr::OriginalName("Common")] Common = 2,
    [pbr::OriginalName("Dictionary")] Dictionary = 3,
    [pbr::OriginalName("LeastCommon")] LeastCommon = 4,
    [pbr::OriginalName("CopyPastas")] CopyPastas = 5,
    [pbr::OriginalName("SpamTap")] SpamTap = 6,
    [pbr::OriginalName("Numbers")] Numbers = 7,
    [pbr::OriginalName("Marathon")] Marathon = 8,
    [pbr::OriginalName("HomeRow")] HomeRow = 9,
    [pbr::OriginalName("UpperRow")] UpperRow = 10,
    [pbr::OriginalName("RightHand")] RightHand = 11,
    [pbr::OriginalName("LeftHand")] LeftHand = 12,
    [pbr::OriginalName("AlternatingHand")] AlternatingHand = 13,
    [pbr::OriginalName("FakeWords")] FakeWords = 14,
    [pbr::OriginalName("LongestHundred")] LongestHundred = 15,
  }

  public enum PlayerAuthType {
    [pbr::OriginalName("InvalidAuthType")] InvalidAuthType = 0,
    [pbr::OriginalName("Anonymous")] Anonymous = 1,
    [pbr::OriginalName("Authenticated")] Authenticated = 2,
  }

  #endregion

  #region Messages
  public sealed partial class InGamePlayer : pb::IMessage<InGamePlayer> {
    private static readonly pb::MessageParser<InGamePlayer> _parser = new pb::MessageParser<InGamePlayer>(() => new InGamePlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InGamePlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InGamePlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InGamePlayer(InGamePlayer other) : this() {
      name_ = other.name_;
      id_ = other.id_;
      isBot_ = other.isBot_;
      isYou_ = other.isYou_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InGamePlayer Clone() {
      return new InGamePlayer(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int idFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_bot" field.</summary>
    public const int IsBotFieldNumber = 3;
    private bool isBot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBot {
      get { return isBot_; }
      set {
        isBot_ = value;
      }
    }

    /// <summary>Field number for the "is_you" field.</summary>
    public const int IsYouFieldNumber = 4;
    private bool isYou_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsYou {
      get { return isYou_; }
      set {
        isYou_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InGamePlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InGamePlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (id != other.id) return false;
      if (IsBot != other.IsBot) return false;
      if (IsYou != other.IsYou) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (id.Length != 0) hash ^= id.GetHashCode();
      if (IsBot != false) hash ^= IsBot.GetHashCode();
      if (IsYou != false) hash ^= IsYou.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(id);
      }
      if (IsBot != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsBot);
      }
      if (IsYou != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsYou);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(id);
      }
      if (IsBot != false) {
        size += 1 + 1;
      }
      if (IsYou != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InGamePlayer other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.id.Length != 0) {
        id = other.id;
      }
      if (other.IsBot != false) {
        IsBot = other.IsBot;
      }
      if (other.IsYou != false) {
        IsYou = other.IsYou;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            id = input.ReadString();
            break;
          }
          case 24: {
            IsBot = input.ReadBool();
            break;
          }
          case 32: {
            IsYou = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OneofRequest : pb::IMessage<OneofRequest> {
    private static readonly pb::MessageParser<OneofRequest> _parser = new pb::MessageParser<OneofRequest>(() => new OneofRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneofRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofRequest(OneofRequest other) : this() {
      senderId_ = other.senderId_;
      senderToken_ = other.senderToken_;
      switch (other.RequestCase) {
        case RequestOneofCase.FindGame:
          FindGame = other.FindGame.Clone();
          break;
        case RequestOneofCase.TypeWord:
          TypeWord = other.TypeWord.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofRequest Clone() {
      return new OneofRequest(this);
    }

    /// <summary>Field number for the "sender_id" field.</summary>
    public const int SenderIdFieldNumber = 1;
    private string senderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderId {
      get { return senderId_; }
      set {
        senderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sender_token" field.</summary>
    public const int SenderTokenFieldNumber = 2;
    private string senderToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderToken {
      get { return senderToken_; }
      set {
        senderToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "find_game" field.</summary>
    public const int FindGameFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Schema.FindGameRequest FindGame {
      get { return requestCase_ == RequestOneofCase.FindGame ? (global::Schema.FindGameRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.FindGame;
      }
    }

    /// <summary>Field number for the "type_word" field.</summary>
    public const int TypeWordFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Schema.TypeWordRequest TypeWord {
      get { return requestCase_ == RequestOneofCase.TypeWord ? (global::Schema.TypeWordRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.TypeWord;
      }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      FindGame = 3,
      TypeWord = 4,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OneofRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneofRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SenderId != other.SenderId) return false;
      if (SenderToken != other.SenderToken) return false;
      if (!object.Equals(FindGame, other.FindGame)) return false;
      if (!object.Equals(TypeWord, other.TypeWord)) return false;
      if (RequestCase != other.RequestCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SenderId.Length != 0) hash ^= SenderId.GetHashCode();
      if (SenderToken.Length != 0) hash ^= SenderToken.GetHashCode();
      if (requestCase_ == RequestOneofCase.FindGame) hash ^= FindGame.GetHashCode();
      if (requestCase_ == RequestOneofCase.TypeWord) hash ^= TypeWord.GetHashCode();
      hash ^= (int) requestCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SenderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SenderId);
      }
      if (SenderToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SenderToken);
      }
      if (requestCase_ == RequestOneofCase.FindGame) {
        output.WriteRawTag(26);
        output.WriteMessage(FindGame);
      }
      if (requestCase_ == RequestOneofCase.TypeWord) {
        output.WriteRawTag(34);
        output.WriteMessage(TypeWord);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SenderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderId);
      }
      if (SenderToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderToken);
      }
      if (requestCase_ == RequestOneofCase.FindGame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FindGame);
      }
      if (requestCase_ == RequestOneofCase.TypeWord) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypeWord);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneofRequest other) {
      if (other == null) {
        return;
      }
      if (other.SenderId.Length != 0) {
        SenderId = other.SenderId;
      }
      if (other.SenderToken.Length != 0) {
        SenderToken = other.SenderToken;
      }
      switch (other.RequestCase) {
        case RequestOneofCase.FindGame:
          if (FindGame == null) {
            FindGame = new global::Schema.FindGameRequest();
          }
          FindGame.MergeFrom(other.FindGame);
          break;
        case RequestOneofCase.TypeWord:
          if (TypeWord == null) {
            TypeWord = new global::Schema.TypeWordRequest();
          }
          TypeWord.MergeFrom(other.TypeWord);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SenderId = input.ReadString();
            break;
          }
          case 18: {
            SenderToken = input.ReadString();
            break;
          }
          case 26: {
            global::Schema.FindGameRequest subBuilder = new global::Schema.FindGameRequest();
            if (requestCase_ == RequestOneofCase.FindGame) {
              subBuilder.MergeFrom(FindGame);
            }
            input.ReadMessage(subBuilder);
            FindGame = subBuilder;
            break;
          }
          case 34: {
            global::Schema.TypeWordRequest subBuilder = new global::Schema.TypeWordRequest();
            if (requestCase_ == RequestOneofCase.TypeWord) {
              subBuilder.MergeFrom(TypeWord);
            }
            input.ReadMessage(subBuilder);
            TypeWord = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class FindGameRequest : pb::IMessage<FindGameRequest> {
    private static readonly pb::MessageParser<FindGameRequest> _parser = new pb::MessageParser<FindGameRequest>(() => new FindGameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindGameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindGameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindGameRequest(FindGameRequest other) : this() {
      playerName_ = other.playerName_;
      gameModes_ = other.gameModes_.Clone();
      privateGame_ = other.privateGame_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindGameRequest Clone() {
      return new FindGameRequest(this);
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 1;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_modes" field.</summary>
    public const int GameModesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Schema.GameMode> _repeated_gameModes_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Schema.GameMode) x);
    private readonly pbc::RepeatedField<global::Schema.GameMode> gameModes_ = new pbc::RepeatedField<global::Schema.GameMode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Schema.GameMode> GameModes {
      get { return gameModes_; }
    }

    /// <summary>Field number for the "private_game" field.</summary>
    public const int PrivateGameFieldNumber = 3;
    private bool privateGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PrivateGame {
      get { return privateGame_; }
      set {
        privateGame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindGameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindGameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerName != other.PlayerName) return false;
      if(!gameModes_.Equals(other.gameModes_)) return false;
      if (PrivateGame != other.PrivateGame) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      hash ^= gameModes_.GetHashCode();
      if (PrivateGame != false) hash ^= PrivateGame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerName);
      }
      gameModes_.WriteTo(output, _repeated_gameModes_codec);
      if (PrivateGame != false) {
        output.WriteRawTag(24);
        output.WriteBool(PrivateGame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      size += gameModes_.CalculateSize(_repeated_gameModes_codec);
      if (PrivateGame != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindGameRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      gameModes_.Add(other.gameModes_);
      if (other.PrivateGame != false) {
        PrivateGame = other.PrivateGame;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerName = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            gameModes_.AddEntriesFrom(input, _repeated_gameModes_codec);
            break;
          }
          case 24: {
            PrivateGame = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyStroke : pb::IMessage<KeyStroke> {
    private static readonly pb::MessageParser<KeyStroke> _parser = new pb::MessageParser<KeyStroke>(() => new KeyStroke());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyStroke> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyStroke() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyStroke(KeyStroke other) : this() {
      character_ = other.character_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyStroke Clone() {
      return new KeyStroke(this);
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 1;
    private string character_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Character {
      get { return character_; }
      set {
        character_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyStroke);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyStroke other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Character != other.Character) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Character.Length != 0) hash ^= Character.GetHashCode();
      if (Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Character.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Character);
      }
      if (Time != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Character.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Character);
      }
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyStroke other) {
      if (other == null) {
        return;
      }
      if (other.Character.Length != 0) {
        Character = other.Character;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Character = input.ReadString();
            break;
          }
          case 21: {
            Time = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TypeWordRequest : pb::IMessage<TypeWordRequest> {
    private static readonly pb::MessageParser<TypeWordRequest> _parser = new pb::MessageParser<TypeWordRequest>(() => new TypeWordRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TypeWordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeWordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeWordRequest(TypeWordRequest other) : this() {
      word_ = other.word_;
      keyStrokes_ = other.keyStrokes_.Clone();
      numErrors_ = other.numErrors_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeWordRequest Clone() {
      return new TypeWordRequest(this);
    }

    /// <summary>Field number for the "word" field.</summary>
    public const int WordFieldNumber = 1;
    private string word_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Word {
      get { return word_; }
      set {
        word_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key_strokes" field.</summary>
    public const int KeyStrokesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Schema.KeyStroke> _repeated_keyStrokes_codec
        = pb::FieldCodec.ForMessage(18, global::Schema.KeyStroke.Parser);
    private readonly pbc::RepeatedField<global::Schema.KeyStroke> keyStrokes_ = new pbc::RepeatedField<global::Schema.KeyStroke>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Schema.KeyStroke> KeyStrokes {
      get { return keyStrokes_; }
    }

    /// <summary>Field number for the "num_errors" field.</summary>
    public const int NumErrorsFieldNumber = 3;
    private int numErrors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumErrors {
      get { return numErrors_; }
      set {
        numErrors_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TypeWordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TypeWordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Word != other.Word) return false;
      if(!keyStrokes_.Equals(other.keyStrokes_)) return false;
      if (NumErrors != other.NumErrors) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Word.Length != 0) hash ^= Word.GetHashCode();
      hash ^= keyStrokes_.GetHashCode();
      if (NumErrors != 0) hash ^= NumErrors.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Word.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Word);
      }
      keyStrokes_.WriteTo(output, _repeated_keyStrokes_codec);
      if (NumErrors != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumErrors);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Word.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Word);
      }
      size += keyStrokes_.CalculateSize(_repeated_keyStrokes_codec);
      if (NumErrors != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumErrors);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TypeWordRequest other) {
      if (other == null) {
        return;
      }
      if (other.Word.Length != 0) {
        Word = other.Word;
      }
      keyStrokes_.Add(other.keyStrokes_);
      if (other.NumErrors != 0) {
        NumErrors = other.NumErrors;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Word = input.ReadString();
            break;
          }
          case 18: {
            keyStrokes_.AddEntriesFrom(input, _repeated_keyStrokes_codec);
            break;
          }
          case 24: {
            NumErrors = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OneofUpdate : pb::IMessage<OneofUpdate> {
    private static readonly pb::MessageParser<OneofUpdate> _parser = new pb::MessageParser<OneofUpdate>(() => new OneofUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneofUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofUpdate(OneofUpdate other) : this() {
      recipientId_ = other.recipientId_;
      gameId_ = other.gameId_;
      switch (other.UpdateCase) {
        case UpdateOneofCase.GameOver:
          GameOver = other.GameOver.Clone();
          break;
        case UpdateOneofCase.GameStarted:
          GameStarted = other.GameStarted.Clone();
          break;
        case UpdateOneofCase.GameStarting:
          GameStarting = other.GameStarting.Clone();
          break;
        case UpdateOneofCase.PlayerCompleted:
          PlayerCompleted = other.PlayerCompleted.Clone();
          break;
        case UpdateOneofCase.PlayerJoinedGame:
          PlayerJoinedGame = other.PlayerJoinedGame.Clone();
          break;
        case UpdateOneofCase.WordFinished:
          WordFinished = other.WordFinished.Clone();
          break;
        case UpdateOneofCase.YouveBeenAddedToGame:
          YouveBeenAddedToGame = other.YouveBeenAddedToGame.Clone();
          break;
        case UpdateOneofCase.PlayerDisconnected:
          PlayerDisconnected = other.PlayerDisconnected.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofUpdate Clone() {
      return new OneofUpdate(this);
    }

    /// <summary>Field number for the "recipient_id" field.</summary>
    public const int RecipientIdFieldNumber = 1;
    private string recipientId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RecipientId {
      get { return recipientId_; }
      set {
        recipientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private string gameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_over" field.</summary>
    public const int GameOverFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Schema.GameOver GameOver {
      get { return updateCase_ == UpdateOneofCase.GameOver ? (global::Schema.GameOver) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.GameOver;
      }
    }

    /// <summary>Field number for the "game_started" field.</summary>
    public const int GameStartedFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Schema.GameStarted GameStarted {
      get { return updateCase_ == UpdateOneofCase.GameStarted ? (global::Schema.GameStarted) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.GameStarted;
      }
    }

    /// <summary>Field number for the "game_starting" field.</summary>
    public const int GameStartingFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Schema.GameStarting GameStarting {
      get { return updateCase_ == UpdateOneofCase.GameStarting ? (global::Schema.GameStarting) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.GameStarting;
      }
    }

    /// <summary>Field number for the "player_completed" field.</summary>
    public const int PlayerCompletedFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Schema.PlayerCompleted PlayerCompleted {
      get { return updateCase_ == UpdateOneofCase.PlayerCompleted ? (global::Schema.PlayerCompleted) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.PlayerCompleted;
      }
    }

    /// <summary>Field number for the "player_joined_game" field.</summary>
    public const int PlayerJoinedGameFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Schema.PlayerJoinedGame PlayerJoinedGame {
      get { return updateCase_ == UpdateOneofCase.PlayerJoinedGame ? (global::Schema.PlayerJoinedGame) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.PlayerJoinedGame;
      }
    }

    /// <summary>Field number for the "word_finished" field.</summary>
    public const int WordFinishedFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Schema.WordFinished WordFinished {
      get { return updateCase_ == UpdateOneofCase.WordFinished ? (global::Schema.WordFinished) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.WordFinished;
      }
    }

    /// <summary>Field number for the "youve_been_added_to_game" field.</summary>
    public const int YouveBeenAddedToGameFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Schema.YouveBeenAddedToGame YouveBeenAddedToGame {
      get { return updateCase_ == UpdateOneofCase.YouveBeenAddedToGame ? (global::Schema.YouveBeenAddedToGame) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.YouveBeenAddedToGame;
      }
    }

    /// <summary>Field number for the "player_disconnected" field.</summary>
    public const int PlayerDisconnectedFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Schema.PlayerDisconnected PlayerDisconnected {
      get { return updateCase_ == UpdateOneofCase.PlayerDisconnected ? (global::Schema.PlayerDisconnected) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.PlayerDisconnected;
      }
    }

    private object update_;
    /// <summary>Enum of possible cases for the "update" oneof.</summary>
    public enum UpdateOneofCase {
      None = 0,
      GameOver = 3,
      GameStarted = 4,
      GameStarting = 5,
      PlayerCompleted = 6,
      PlayerJoinedGame = 7,
      WordFinished = 8,
      YouveBeenAddedToGame = 9,
      PlayerDisconnected = 10,
    }
    private UpdateOneofCase updateCase_ = UpdateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOneofCase UpdateCase {
      get { return updateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUpdate() {
      updateCase_ = UpdateOneofCase.None;
      update_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OneofUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneofUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecipientId != other.RecipientId) return false;
      if (GameId != other.GameId) return false;
      if (!object.Equals(GameOver, other.GameOver)) return false;
      if (!object.Equals(GameStarted, other.GameStarted)) return false;
      if (!object.Equals(GameStarting, other.GameStarting)) return false;
      if (!object.Equals(PlayerCompleted, other.PlayerCompleted)) return false;
      if (!object.Equals(PlayerJoinedGame, other.PlayerJoinedGame)) return false;
      if (!object.Equals(WordFinished, other.WordFinished)) return false;
      if (!object.Equals(YouveBeenAddedToGame, other.YouveBeenAddedToGame)) return false;
      if (!object.Equals(PlayerDisconnected, other.PlayerDisconnected)) return false;
      if (UpdateCase != other.UpdateCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecipientId.Length != 0) hash ^= RecipientId.GetHashCode();
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (updateCase_ == UpdateOneofCase.GameOver) hash ^= GameOver.GetHashCode();
      if (updateCase_ == UpdateOneofCase.GameStarted) hash ^= GameStarted.GetHashCode();
      if (updateCase_ == UpdateOneofCase.GameStarting) hash ^= GameStarting.GetHashCode();
      if (updateCase_ == UpdateOneofCase.PlayerCompleted) hash ^= PlayerCompleted.GetHashCode();
      if (updateCase_ == UpdateOneofCase.PlayerJoinedGame) hash ^= PlayerJoinedGame.GetHashCode();
      if (updateCase_ == UpdateOneofCase.WordFinished) hash ^= WordFinished.GetHashCode();
      if (updateCase_ == UpdateOneofCase.YouveBeenAddedToGame) hash ^= YouveBeenAddedToGame.GetHashCode();
      if (updateCase_ == UpdateOneofCase.PlayerDisconnected) hash ^= PlayerDisconnected.GetHashCode();
      hash ^= (int) updateCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecipientId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RecipientId);
      }
      if (GameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameId);
      }
      if (updateCase_ == UpdateOneofCase.GameOver) {
        output.WriteRawTag(26);
        output.WriteMessage(GameOver);
      }
      if (updateCase_ == UpdateOneofCase.GameStarted) {
        output.WriteRawTag(34);
        output.WriteMessage(GameStarted);
      }
      if (updateCase_ == UpdateOneofCase.GameStarting) {
        output.WriteRawTag(42);
        output.WriteMessage(GameStarting);
      }
      if (updateCase_ == UpdateOneofCase.PlayerCompleted) {
        output.WriteRawTag(50);
        output.WriteMessage(PlayerCompleted);
      }
      if (updateCase_ == UpdateOneofCase.PlayerJoinedGame) {
        output.WriteRawTag(58);
        output.WriteMessage(PlayerJoinedGame);
      }
      if (updateCase_ == UpdateOneofCase.WordFinished) {
        output.WriteRawTag(66);
        output.WriteMessage(WordFinished);
      }
      if (updateCase_ == UpdateOneofCase.YouveBeenAddedToGame) {
        output.WriteRawTag(74);
        output.WriteMessage(YouveBeenAddedToGame);
      }
      if (updateCase_ == UpdateOneofCase.PlayerDisconnected) {
        output.WriteRawTag(82);
        output.WriteMessage(PlayerDisconnected);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecipientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RecipientId);
      }
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (updateCase_ == UpdateOneofCase.GameOver) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameOver);
      }
      if (updateCase_ == UpdateOneofCase.GameStarted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameStarted);
      }
      if (updateCase_ == UpdateOneofCase.GameStarting) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameStarting);
      }
      if (updateCase_ == UpdateOneofCase.PlayerCompleted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerCompleted);
      }
      if (updateCase_ == UpdateOneofCase.PlayerJoinedGame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerJoinedGame);
      }
      if (updateCase_ == UpdateOneofCase.WordFinished) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WordFinished);
      }
      if (updateCase_ == UpdateOneofCase.YouveBeenAddedToGame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(YouveBeenAddedToGame);
      }
      if (updateCase_ == UpdateOneofCase.PlayerDisconnected) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerDisconnected);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneofUpdate other) {
      if (other == null) {
        return;
      }
      if (other.RecipientId.Length != 0) {
        RecipientId = other.RecipientId;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      switch (other.UpdateCase) {
        case UpdateOneofCase.GameOver:
          if (GameOver == null) {
            GameOver = new global::Schema.GameOver();
          }
          GameOver.MergeFrom(other.GameOver);
          break;
        case UpdateOneofCase.GameStarted:
          if (GameStarted == null) {
            GameStarted = new global::Schema.GameStarted();
          }
          GameStarted.MergeFrom(other.GameStarted);
          break;
        case UpdateOneofCase.GameStarting:
          if (GameStarting == null) {
            GameStarting = new global::Schema.GameStarting();
          }
          GameStarting.MergeFrom(other.GameStarting);
          break;
        case UpdateOneofCase.PlayerCompleted:
          if (PlayerCompleted == null) {
            PlayerCompleted = new global::Schema.PlayerCompleted();
          }
          PlayerCompleted.MergeFrom(other.PlayerCompleted);
          break;
        case UpdateOneofCase.PlayerJoinedGame:
          if (PlayerJoinedGame == null) {
            PlayerJoinedGame = new global::Schema.PlayerJoinedGame();
          }
          PlayerJoinedGame.MergeFrom(other.PlayerJoinedGame);
          break;
        case UpdateOneofCase.WordFinished:
          if (WordFinished == null) {
            WordFinished = new global::Schema.WordFinished();
          }
          WordFinished.MergeFrom(other.WordFinished);
          break;
        case UpdateOneofCase.YouveBeenAddedToGame:
          if (YouveBeenAddedToGame == null) {
            YouveBeenAddedToGame = new global::Schema.YouveBeenAddedToGame();
          }
          YouveBeenAddedToGame.MergeFrom(other.YouveBeenAddedToGame);
          break;
        case UpdateOneofCase.PlayerDisconnected:
          if (PlayerDisconnected == null) {
            PlayerDisconnected = new global::Schema.PlayerDisconnected();
          }
          PlayerDisconnected.MergeFrom(other.PlayerDisconnected);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RecipientId = input.ReadString();
            break;
          }
          case 18: {
            GameId = input.ReadString();
            break;
          }
          case 26: {
            global::Schema.GameOver subBuilder = new global::Schema.GameOver();
            if (updateCase_ == UpdateOneofCase.GameOver) {
              subBuilder.MergeFrom(GameOver);
            }
            input.ReadMessage(subBuilder);
            GameOver = subBuilder;
            break;
          }
          case 34: {
            global::Schema.GameStarted subBuilder = new global::Schema.GameStarted();
            if (updateCase_ == UpdateOneofCase.GameStarted) {
              subBuilder.MergeFrom(GameStarted);
            }
            input.ReadMessage(subBuilder);
            GameStarted = subBuilder;
            break;
          }
          case 42: {
            global::Schema.GameStarting subBuilder = new global::Schema.GameStarting();
            if (updateCase_ == UpdateOneofCase.GameStarting) {
              subBuilder.MergeFrom(GameStarting);
            }
            input.ReadMessage(subBuilder);
            GameStarting = subBuilder;
            break;
          }
          case 50: {
            global::Schema.PlayerCompleted subBuilder = new global::Schema.PlayerCompleted();
            if (updateCase_ == UpdateOneofCase.PlayerCompleted) {
              subBuilder.MergeFrom(PlayerCompleted);
            }
            input.ReadMessage(subBuilder);
            PlayerCompleted = subBuilder;
            break;
          }
          case 58: {
            global::Schema.PlayerJoinedGame subBuilder = new global::Schema.PlayerJoinedGame();
            if (updateCase_ == UpdateOneofCase.PlayerJoinedGame) {
              subBuilder.MergeFrom(PlayerJoinedGame);
            }
            input.ReadMessage(subBuilder);
            PlayerJoinedGame = subBuilder;
            break;
          }
          case 66: {
            global::Schema.WordFinished subBuilder = new global::Schema.WordFinished();
            if (updateCase_ == UpdateOneofCase.WordFinished) {
              subBuilder.MergeFrom(WordFinished);
            }
            input.ReadMessage(subBuilder);
            WordFinished = subBuilder;
            break;
          }
          case 74: {
            global::Schema.YouveBeenAddedToGame subBuilder = new global::Schema.YouveBeenAddedToGame();
            if (updateCase_ == UpdateOneofCase.YouveBeenAddedToGame) {
              subBuilder.MergeFrom(YouveBeenAddedToGame);
            }
            input.ReadMessage(subBuilder);
            YouveBeenAddedToGame = subBuilder;
            break;
          }
          case 82: {
            global::Schema.PlayerDisconnected subBuilder = new global::Schema.PlayerDisconnected();
            if (updateCase_ == UpdateOneofCase.PlayerDisconnected) {
              subBuilder.MergeFrom(PlayerDisconnected);
            }
            input.ReadMessage(subBuilder);
            PlayerDisconnected = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameOver : pb::IMessage<GameOver> {
    private static readonly pb::MessageParser<GameOver> _parser = new pb::MessageParser<GameOver>(() => new GameOver());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameOver> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOver() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOver(GameOver other) : this() {
      endTimeS_ = other.endTimeS_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOver Clone() {
      return new GameOver(this);
    }

    /// <summary>Field number for the "end_time_s" field.</summary>
    public const int EndTimeSFieldNumber = 1;
    private float endTimeS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndTimeS {
      get { return endTimeS_; }
      set {
        endTimeS_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameOver);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameOver other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndTimeS, other.EndTimeS)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EndTimeS != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndTimeS);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EndTimeS != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(EndTimeS);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndTimeS != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameOver other) {
      if (other == null) {
        return;
      }
      if (other.EndTimeS != 0F) {
        EndTimeS = other.EndTimeS;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            EndTimeS = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameStarted : pb::IMessage<GameStarted> {
    private static readonly pb::MessageParser<GameStarted> _parser = new pb::MessageParser<GameStarted>(() => new GameStarted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameStarted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStarted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStarted(GameStarted other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStarted Clone() {
      return new GameStarted(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameStarted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameStarted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameStarted other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GameStarting : pb::IMessage<GameStarting> {
    private static readonly pb::MessageParser<GameStarting> _parser = new pb::MessageParser<GameStarting>(() => new GameStarting());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameStarting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStarting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStarting(GameStarting other) : this() {
      countdown_ = other.countdown_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStarting Clone() {
      return new GameStarting(this);
    }

    /// <summary>Field number for the "countdown" field.</summary>
    public const int CountdownFieldNumber = 1;
    private float countdown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Countdown {
      get { return countdown_; }
      set {
        countdown_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameStarting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameStarting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Countdown, other.Countdown)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Countdown != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Countdown);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Countdown != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Countdown);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Countdown != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameStarting other) {
      if (other == null) {
        return;
      }
      if (other.Countdown != 0F) {
        Countdown = other.Countdown;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Countdown = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ErrorsAtTime : pb::IMessage<ErrorsAtTime> {
    private static readonly pb::MessageParser<ErrorsAtTime> _parser = new pb::MessageParser<ErrorsAtTime>(() => new ErrorsAtTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorsAtTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorsAtTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorsAtTime(ErrorsAtTime other) : this() {
      time_ = other.time_;
      errorCount_ = other.errorCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorsAtTime Clone() {
      return new ErrorsAtTime(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "error_count" field.</summary>
    public const int ErrorCountFieldNumber = 2;
    private int errorCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCount {
      get { return errorCount_; }
      set {
        errorCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorsAtTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorsAtTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      if (ErrorCount != other.ErrorCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (ErrorCount != 0) hash ^= ErrorCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Time);
      }
      if (ErrorCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ErrorCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (ErrorCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorsAtTime other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.ErrorCount != 0) {
        ErrorCount = other.ErrorCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Time = input.ReadFloat();
            break;
          }
          case 16: {
            ErrorCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerCompleted : pb::IMessage<PlayerCompleted> {
    private static readonly pb::MessageParser<PlayerCompleted> _parser = new pb::MessageParser<PlayerCompleted>(() => new PlayerCompleted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCompleted(PlayerCompleted other) : this() {
      playerId_ = other.playerId_;
      place_ = other.place_;
      rawWpmBySecond_ = other.rawWpmBySecond_.Clone();
      wpmBySecond_ = other.wpmBySecond_.Clone();
      wpm_ = other.wpm_;
      accuracy_ = other.accuracy_;
      mode_ = other.mode_;
      errorsAtTime_ = other.errorsAtTime_.Clone();
      numErrors_ = other.numErrors_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCompleted Clone() {
      return new PlayerCompleted(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "place" field.</summary>
    public const int PlaceFieldNumber = 2;
    private int place_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Place {
      get { return place_; }
      set {
        place_ = value;
      }
    }

    /// <summary>Field number for the "raw_wpm_by_second" field.</summary>
    public const int RawWpmBySecondFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_rawWpmBySecond_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> rawWpmBySecond_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> RawWpmBySecond {
      get { return rawWpmBySecond_; }
    }

    /// <summary>Field number for the "wpm_by_second" field.</summary>
    public const int WpmBySecondFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_wpmBySecond_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> wpmBySecond_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> WpmBySecond {
      get { return wpmBySecond_; }
    }

    /// <summary>Field number for the "wpm" field.</summary>
    public const int WpmFieldNumber = 5;
    private float wpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Wpm {
      get { return wpm_; }
      set {
        wpm_ = value;
      }
    }

    /// <summary>Field number for the "accuracy" field.</summary>
    public const int AccuracyFieldNumber = 6;
    private float accuracy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Accuracy {
      get { return accuracy_; }
      set {
        accuracy_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 7;
    private global::Schema.GameMode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Schema.GameMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "errors_at_time" field.</summary>
    public const int ErrorsAtTimeFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Schema.ErrorsAtTime> _repeated_errorsAtTime_codec
        = pb::FieldCodec.ForMessage(66, global::Schema.ErrorsAtTime.Parser);
    private readonly pbc::RepeatedField<global::Schema.ErrorsAtTime> errorsAtTime_ = new pbc::RepeatedField<global::Schema.ErrorsAtTime>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Schema.ErrorsAtTime> ErrorsAtTime {
      get { return errorsAtTime_; }
    }

    /// <summary>Field number for the "num_errors" field.</summary>
    public const int NumErrorsFieldNumber = 9;
    private int numErrors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumErrors {
      get { return numErrors_; }
      set {
        numErrors_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Place != other.Place) return false;
      if(!rawWpmBySecond_.Equals(other.rawWpmBySecond_)) return false;
      if(!wpmBySecond_.Equals(other.wpmBySecond_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Wpm, other.Wpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Accuracy, other.Accuracy)) return false;
      if (Mode != other.Mode) return false;
      if(!errorsAtTime_.Equals(other.errorsAtTime_)) return false;
      if (NumErrors != other.NumErrors) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (Place != 0) hash ^= Place.GetHashCode();
      hash ^= rawWpmBySecond_.GetHashCode();
      hash ^= wpmBySecond_.GetHashCode();
      if (Wpm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Wpm);
      if (Accuracy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Accuracy);
      if (Mode != 0) hash ^= Mode.GetHashCode();
      hash ^= errorsAtTime_.GetHashCode();
      if (NumErrors != 0) hash ^= NumErrors.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (Place != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Place);
      }
      rawWpmBySecond_.WriteTo(output, _repeated_rawWpmBySecond_codec);
      wpmBySecond_.WriteTo(output, _repeated_wpmBySecond_codec);
      if (Wpm != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Wpm);
      }
      if (Accuracy != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Accuracy);
      }
      if (Mode != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Mode);
      }
      errorsAtTime_.WriteTo(output, _repeated_errorsAtTime_codec);
      if (NumErrors != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(NumErrors);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (Place != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Place);
      }
      size += rawWpmBySecond_.CalculateSize(_repeated_rawWpmBySecond_codec);
      size += wpmBySecond_.CalculateSize(_repeated_wpmBySecond_codec);
      if (Wpm != 0F) {
        size += 1 + 4;
      }
      if (Accuracy != 0F) {
        size += 1 + 4;
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      size += errorsAtTime_.CalculateSize(_repeated_errorsAtTime_codec);
      if (NumErrors != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumErrors);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerCompleted other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Place != 0) {
        Place = other.Place;
      }
      rawWpmBySecond_.Add(other.rawWpmBySecond_);
      wpmBySecond_.Add(other.wpmBySecond_);
      if (other.Wpm != 0F) {
        Wpm = other.Wpm;
      }
      if (other.Accuracy != 0F) {
        Accuracy = other.Accuracy;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      errorsAtTime_.Add(other.errorsAtTime_);
      if (other.NumErrors != 0) {
        NumErrors = other.NumErrors;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 16: {
            Place = input.ReadInt32();
            break;
          }
          case 26:
          case 29: {
            rawWpmBySecond_.AddEntriesFrom(input, _repeated_rawWpmBySecond_codec);
            break;
          }
          case 34:
          case 37: {
            wpmBySecond_.AddEntriesFrom(input, _repeated_wpmBySecond_codec);
            break;
          }
          case 45: {
            Wpm = input.ReadFloat();
            break;
          }
          case 53: {
            Accuracy = input.ReadFloat();
            break;
          }
          case 56: {
            mode_ = (global::Schema.GameMode) input.ReadEnum();
            break;
          }
          case 66: {
            errorsAtTime_.AddEntriesFrom(input, _repeated_errorsAtTime_codec);
            break;
          }
          case 72: {
            NumErrors = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerJoinedGame : pb::IMessage<PlayerJoinedGame> {
    private static readonly pb::MessageParser<PlayerJoinedGame> _parser = new pb::MessageParser<PlayerJoinedGame>(() => new PlayerJoinedGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerJoinedGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerJoinedGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerJoinedGame(PlayerJoinedGame other) : this() {
      player_ = other.player_ != null ? other.player_.Clone() : null;
      gameId_ = other.gameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerJoinedGame Clone() {
      return new PlayerJoinedGame(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::Schema.InGamePlayer player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Schema.InGamePlayer Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private string gameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerJoinedGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerJoinedGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Player, other.Player)) return false;
      if (GameId != other.GameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (player_ != null) hash ^= Player.GetHashCode();
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      if (GameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerJoinedGame other) {
      if (other == null) {
        return;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::Schema.InGamePlayer();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (player_ == null) {
              player_ = new global::Schema.InGamePlayer();
            }
            input.ReadMessage(player_);
            break;
          }
          case 18: {
            GameId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WordFinished : pb::IMessage<WordFinished> {
    private static readonly pb::MessageParser<WordFinished> _parser = new pb::MessageParser<WordFinished>(() => new WordFinished());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WordFinished> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WordFinished() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WordFinished(WordFinished other) : this() {
      playerId_ = other.playerId_;
      percentComplete_ = other.percentComplete_;
      velocityKmS_ = other.velocityKmS_;
      positionKm_ = other.positionKm_;
      charCompletionTimes_ = other.charCompletionTimes_.Clone();
      wpm_ = other.wpm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WordFinished Clone() {
      return new WordFinished(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "percent_complete" field.</summary>
    public const int PercentCompleteFieldNumber = 2;
    private float percentComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PercentComplete {
      get { return percentComplete_; }
      set {
        percentComplete_ = value;
      }
    }

    /// <summary>Field number for the "velocity_km_s" field.</summary>
    public const int VelocityKmSFieldNumber = 3;
    private float velocityKmS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelocityKmS {
      get { return velocityKmS_; }
      set {
        velocityKmS_ = value;
      }
    }

    /// <summary>Field number for the "position_km" field.</summary>
    public const int PositionKmFieldNumber = 4;
    private float positionKm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionKm {
      get { return positionKm_; }
      set {
        positionKm_ = value;
      }
    }

    /// <summary>Field number for the "char_completion_times" field.</summary>
    public const int CharCompletionTimesFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_charCompletionTimes_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> charCompletionTimes_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> CharCompletionTimes {
      get { return charCompletionTimes_; }
    }

    /// <summary>Field number for the "wpm" field.</summary>
    public const int WpmFieldNumber = 6;
    private float wpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Wpm {
      get { return wpm_; }
      set {
        wpm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WordFinished);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WordFinished other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PercentComplete, other.PercentComplete)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelocityKmS, other.VelocityKmS)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionKm, other.PositionKm)) return false;
      if(!charCompletionTimes_.Equals(other.charCompletionTimes_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Wpm, other.Wpm)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (PercentComplete != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PercentComplete);
      if (VelocityKmS != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelocityKmS);
      if (PositionKm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionKm);
      hash ^= charCompletionTimes_.GetHashCode();
      if (Wpm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Wpm);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (PercentComplete != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PercentComplete);
      }
      if (VelocityKmS != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(VelocityKmS);
      }
      if (PositionKm != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PositionKm);
      }
      charCompletionTimes_.WriteTo(output, _repeated_charCompletionTimes_codec);
      if (Wpm != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Wpm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (PercentComplete != 0F) {
        size += 1 + 4;
      }
      if (VelocityKmS != 0F) {
        size += 1 + 4;
      }
      if (PositionKm != 0F) {
        size += 1 + 4;
      }
      size += charCompletionTimes_.CalculateSize(_repeated_charCompletionTimes_codec);
      if (Wpm != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WordFinished other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.PercentComplete != 0F) {
        PercentComplete = other.PercentComplete;
      }
      if (other.VelocityKmS != 0F) {
        VelocityKmS = other.VelocityKmS;
      }
      if (other.PositionKm != 0F) {
        PositionKm = other.PositionKm;
      }
      charCompletionTimes_.Add(other.charCompletionTimes_);
      if (other.Wpm != 0F) {
        Wpm = other.Wpm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 21: {
            PercentComplete = input.ReadFloat();
            break;
          }
          case 29: {
            VelocityKmS = input.ReadFloat();
            break;
          }
          case 37: {
            PositionKm = input.ReadFloat();
            break;
          }
          case 42:
          case 45: {
            charCompletionTimes_.AddEntriesFrom(input, _repeated_charCompletionTimes_codec);
            break;
          }
          case 53: {
            Wpm = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YouveBeenAddedToGame : pb::IMessage<YouveBeenAddedToGame> {
    private static readonly pb::MessageParser<YouveBeenAddedToGame> _parser = new pb::MessageParser<YouveBeenAddedToGame>(() => new YouveBeenAddedToGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YouveBeenAddedToGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YouveBeenAddedToGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YouveBeenAddedToGame(YouveBeenAddedToGame other) : this() {
      gameId_ = other.gameId_;
      currentPlayers_ = other.currentPlayers_.Clone();
      phrase_ = other.phrase_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YouveBeenAddedToGame Clone() {
      return new YouveBeenAddedToGame(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private string gameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "current_players" field.</summary>
    public const int CurrentPlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Schema.InGamePlayer> _repeated_currentPlayers_codec
        = pb::FieldCodec.ForMessage(18, global::Schema.InGamePlayer.Parser);
    private readonly pbc::RepeatedField<global::Schema.InGamePlayer> currentPlayers_ = new pbc::RepeatedField<global::Schema.InGamePlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Schema.InGamePlayer> CurrentPlayers {
      get { return currentPlayers_; }
    }

    /// <summary>Field number for the "phrase" field.</summary>
    public const int PhraseFieldNumber = 3;
    private string phrase_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phrase {
      get { return phrase_; }
      set {
        phrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YouveBeenAddedToGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YouveBeenAddedToGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if(!currentPlayers_.Equals(other.currentPlayers_)) return false;
      if (Phrase != other.Phrase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      hash ^= currentPlayers_.GetHashCode();
      if (Phrase.Length != 0) hash ^= Phrase.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameId);
      }
      currentPlayers_.WriteTo(output, _repeated_currentPlayers_codec);
      if (Phrase.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Phrase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      size += currentPlayers_.CalculateSize(_repeated_currentPlayers_codec);
      if (Phrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phrase);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YouveBeenAddedToGame other) {
      if (other == null) {
        return;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      currentPlayers_.Add(other.currentPlayers_);
      if (other.Phrase.Length != 0) {
        Phrase = other.Phrase;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GameId = input.ReadString();
            break;
          }
          case 18: {
            currentPlayers_.AddEntriesFrom(input, _repeated_currentPlayers_codec);
            break;
          }
          case 26: {
            Phrase = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerDisconnected : pb::IMessage<PlayerDisconnected> {
    private static readonly pb::MessageParser<PlayerDisconnected> _parser = new pb::MessageParser<PlayerDisconnected>(() => new PlayerDisconnected());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerDisconnected> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerDisconnected() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerDisconnected(PlayerDisconnected other) : this() {
      playerId_ = other.playerId_;
      removed_ = other.removed_;
      isYou_ = other.isYou_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerDisconnected Clone() {
      return new PlayerDisconnected(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "removed" field.</summary>
    public const int RemovedFieldNumber = 2;
    private bool removed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Removed {
      get { return removed_; }
      set {
        removed_ = value;
      }
    }

    /// <summary>Field number for the "is_you" field.</summary>
    public const int IsYouFieldNumber = 3;
    private bool isYou_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsYou {
      get { return isYou_; }
      set {
        isYou_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerDisconnected);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerDisconnected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Removed != other.Removed) return false;
      if (IsYou != other.IsYou) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (Removed != false) hash ^= Removed.GetHashCode();
      if (IsYou != false) hash ^= IsYou.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (Removed != false) {
        output.WriteRawTag(16);
        output.WriteBool(Removed);
      }
      if (IsYou != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsYou);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (Removed != false) {
        size += 1 + 1;
      }
      if (IsYou != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerDisconnected other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Removed != false) {
        Removed = other.Removed;
      }
      if (other.IsYou != false) {
        IsYou = other.IsYou;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 16: {
            Removed = input.ReadBool();
            break;
          }
          case 24: {
            IsYou = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimeTrial : pb::IMessage<TimeTrial> {
    private static readonly pb::MessageParser<TimeTrial> _parser = new pb::MessageParser<TimeTrial>(() => new TimeTrial());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeTrial> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeTrial() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeTrial(TimeTrial other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      phrase_ = other.phrase_;
      globalWpm_ = other.globalWpm_.Clone();
      difficulty_ = other.difficulty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeTrial Clone() {
      return new TimeTrial(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int idFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phrase" field.</summary>
    public const int PhraseFieldNumber = 3;
    private string phrase_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phrase {
      get { return phrase_; }
      set {
        phrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "global_wpm" field.</summary>
    public const int GlobalWpmFieldNumber = 4;
    private static readonly pbc::MapField<int, int>.Codec _map_globalWpm_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
    private readonly pbc::MapField<int, int> globalWpm_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> GlobalWpm {
      get { return globalWpm_; }
    }

    /// <summary>Field number for the "difficulty" field.</summary>
    public const int DifficultyFieldNumber = 5;
    private int difficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Difficulty {
      get { return difficulty_; }
      set {
        difficulty_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeTrial);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeTrial other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (id != other.id) return false;
      if (Name != other.Name) return false;
      if (Phrase != other.Phrase) return false;
      if (!GlobalWpm.Equals(other.GlobalWpm)) return false;
      if (Difficulty != other.Difficulty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id.Length != 0) hash ^= id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Phrase.Length != 0) hash ^= Phrase.GetHashCode();
      hash ^= GlobalWpm.GetHashCode();
      if (Difficulty != 0) hash ^= Difficulty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Phrase.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Phrase);
      }
      globalWpm_.WriteTo(output, _map_globalWpm_codec);
      if (Difficulty != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Difficulty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Phrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phrase);
      }
      size += globalWpm_.CalculateSize(_map_globalWpm_codec);
      if (Difficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Difficulty);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeTrial other) {
      if (other == null) {
        return;
      }
      if (other.id.Length != 0) {
        id = other.id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Phrase.Length != 0) {
        Phrase = other.Phrase;
      }
      globalWpm_.Add(other.globalWpm_);
      if (other.Difficulty != 0) {
        Difficulty = other.Difficulty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Phrase = input.ReadString();
            break;
          }
          case 34: {
            globalWpm_.AddEntriesFrom(input, _map_globalWpm_codec);
            break;
          }
          case 40: {
            Difficulty = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListTimeTrialsResponse : pb::IMessage<ListTimeTrialsResponse> {
    private static readonly pb::MessageParser<ListTimeTrialsResponse> _parser = new pb::MessageParser<ListTimeTrialsResponse>(() => new ListTimeTrialsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTimeTrialsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTimeTrialsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTimeTrialsResponse(ListTimeTrialsResponse other) : this() {
      timeTrials_ = other.timeTrials_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTimeTrialsResponse Clone() {
      return new ListTimeTrialsResponse(this);
    }

    /// <summary>Field number for the "time_trials" field.</summary>
    public const int TimeTrialsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Schema.TimeTrialListItem> _repeated_timeTrials_codec
        = pb::FieldCodec.ForMessage(10, global::Schema.TimeTrialListItem.Parser);
    private readonly pbc::RepeatedField<global::Schema.TimeTrialListItem> timeTrials_ = new pbc::RepeatedField<global::Schema.TimeTrialListItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Schema.TimeTrialListItem> TimeTrials {
      get { return timeTrials_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTimeTrialsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTimeTrialsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!timeTrials_.Equals(other.timeTrials_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= timeTrials_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      timeTrials_.WriteTo(output, _repeated_timeTrials_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += timeTrials_.CalculateSize(_repeated_timeTrials_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTimeTrialsResponse other) {
      if (other == null) {
        return;
      }
      timeTrials_.Add(other.timeTrials_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            timeTrials_.AddEntriesFrom(input, _repeated_timeTrials_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimeTrialListItem : pb::IMessage<TimeTrialListItem> {
    private static readonly pb::MessageParser<TimeTrialListItem> _parser = new pb::MessageParser<TimeTrialListItem>(() => new TimeTrialListItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeTrialListItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeTrialListItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeTrialListItem(TimeTrialListItem other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      length_ = other.length_;
      time_ = other.time_;
      percentile_ = other.percentile_;
      wpm_ = other.wpm_;
      difficulty_ = other.difficulty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeTrialListItem Clone() {
      return new TimeTrialListItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int idFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 3;
    private int length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "percentile" field.</summary>
    public const int PercentileFieldNumber = 5;
    private float percentile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Percentile {
      get { return percentile_; }
      set {
        percentile_ = value;
      }
    }

    /// <summary>Field number for the "wpm" field.</summary>
    public const int WpmFieldNumber = 6;
    private float wpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Wpm {
      get { return wpm_; }
      set {
        wpm_ = value;
      }
    }

    /// <summary>Field number for the "difficulty" field.</summary>
    public const int DifficultyFieldNumber = 7;
    private int difficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Difficulty {
      get { return difficulty_; }
      set {
        difficulty_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeTrialListItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeTrialListItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (id != other.id) return false;
      if (Name != other.Name) return false;
      if (Length != other.Length) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Percentile, other.Percentile)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Wpm, other.Wpm)) return false;
      if (Difficulty != other.Difficulty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id.Length != 0) hash ^= id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      if (Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (Percentile != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Percentile);
      if (Wpm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Wpm);
      if (Difficulty != 0) hash ^= Difficulty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Length != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Length);
      }
      if (Time != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Time);
      }
      if (Percentile != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Percentile);
      }
      if (Wpm != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Wpm);
      }
      if (Difficulty != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Difficulty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Length);
      }
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (Percentile != 0F) {
        size += 1 + 4;
      }
      if (Wpm != 0F) {
        size += 1 + 4;
      }
      if (Difficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Difficulty);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeTrialListItem other) {
      if (other == null) {
        return;
      }
      if (other.id.Length != 0) {
        id = other.id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.Percentile != 0F) {
        Percentile = other.Percentile;
      }
      if (other.Wpm != 0F) {
        Wpm = other.Wpm;
      }
      if (other.Difficulty != 0) {
        Difficulty = other.Difficulty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Length = input.ReadInt32();
            break;
          }
          case 37: {
            Time = input.ReadFloat();
            break;
          }
          case 45: {
            Percentile = input.ReadFloat();
            break;
          }
          case 53: {
            Wpm = input.ReadFloat();
            break;
          }
          case 56: {
            Difficulty = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimeTrialResult : pb::IMessage<TimeTrialResult> {
    private static readonly pb::MessageParser<TimeTrialResult> _parser = new pb::MessageParser<TimeTrialResult>(() => new TimeTrialResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeTrialResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeTrialResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeTrialResult(TimeTrialResult other) : this() {
      id_ = other.id_;
      playerId_ = other.playerId_;
      bestWpm_ = other.bestWpm_;
      attemptWpms_ = other.attemptWpms_.Clone();
      bestKeystrokes_ = other.bestKeystrokes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeTrialResult Clone() {
      return new TimeTrialResult(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int idFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "best_wpm" field.</summary>
    public const int BestWpmFieldNumber = 3;
    private float bestWpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BestWpm {
      get { return bestWpm_; }
      set {
        bestWpm_ = value;
      }
    }

    /// <summary>Field number for the "attempt_wpms" field.</summary>
    public const int AttemptWpmsFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_attemptWpms_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> attemptWpms_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AttemptWpms {
      get { return attemptWpms_; }
    }

    /// <summary>Field number for the "best_keystrokes" field.</summary>
    public const int BestKeystrokesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Schema.KeyStroke> _repeated_bestKeystrokes_codec
        = pb::FieldCodec.ForMessage(42, global::Schema.KeyStroke.Parser);
    private readonly pbc::RepeatedField<global::Schema.KeyStroke> bestKeystrokes_ = new pbc::RepeatedField<global::Schema.KeyStroke>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Schema.KeyStroke> BestKeystrokes {
      get { return bestKeystrokes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeTrialResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeTrialResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (id != other.id) return false;
      if (PlayerId != other.PlayerId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BestWpm, other.BestWpm)) return false;
      if(!attemptWpms_.Equals(other.attemptWpms_)) return false;
      if(!bestKeystrokes_.Equals(other.bestKeystrokes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id.Length != 0) hash ^= id.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (BestWpm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BestWpm);
      hash ^= attemptWpms_.GetHashCode();
      hash ^= bestKeystrokes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(id);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (BestWpm != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BestWpm);
      }
      attemptWpms_.WriteTo(output, _repeated_attemptWpms_codec);
      bestKeystrokes_.WriteTo(output, _repeated_bestKeystrokes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(id);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (BestWpm != 0F) {
        size += 1 + 4;
      }
      size += attemptWpms_.CalculateSize(_repeated_attemptWpms_codec);
      size += bestKeystrokes_.CalculateSize(_repeated_bestKeystrokes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeTrialResult other) {
      if (other == null) {
        return;
      }
      if (other.id.Length != 0) {
        id = other.id;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.BestWpm != 0F) {
        BestWpm = other.BestWpm;
      }
      attemptWpms_.Add(other.attemptWpms_);
      bestKeystrokes_.Add(other.bestKeystrokes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            id = input.ReadString();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 29: {
            BestWpm = input.ReadFloat();
            break;
          }
          case 34:
          case 37: {
            attemptWpms_.AddEntriesFrom(input, _repeated_attemptWpms_codec);
            break;
          }
          case 42: {
            bestKeystrokes_.AddEntriesFrom(input, _repeated_bestKeystrokes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportTimeTrialRequest : pb::IMessage<ReportTimeTrialRequest> {
    private static readonly pb::MessageParser<ReportTimeTrialRequest> _parser = new pb::MessageParser<ReportTimeTrialRequest>(() => new ReportTimeTrialRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportTimeTrialRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportTimeTrialRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportTimeTrialRequest(ReportTimeTrialRequest other) : this() {
      id_ = other.id_;
      keystrokes_ = other.keystrokes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportTimeTrialRequest Clone() {
      return new ReportTimeTrialRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int idFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keystrokes" field.</summary>
    public const int KeystrokesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Schema.KeyStroke> _repeated_keystrokes_codec
        = pb::FieldCodec.ForMessage(18, global::Schema.KeyStroke.Parser);
    private readonly pbc::RepeatedField<global::Schema.KeyStroke> keystrokes_ = new pbc::RepeatedField<global::Schema.KeyStroke>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Schema.KeyStroke> Keystrokes {
      get { return keystrokes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportTimeTrialRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportTimeTrialRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (id != other.id) return false;
      if(!keystrokes_.Equals(other.keystrokes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id.Length != 0) hash ^= id.GetHashCode();
      hash ^= keystrokes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(id);
      }
      keystrokes_.WriteTo(output, _repeated_keystrokes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(id);
      }
      size += keystrokes_.CalculateSize(_repeated_keystrokes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportTimeTrialRequest other) {
      if (other == null) {
        return;
      }
      if (other.id.Length != 0) {
        id = other.id;
      }
      keystrokes_.Add(other.keystrokes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            id = input.ReadString();
            break;
          }
          case 18: {
            keystrokes_.AddEntriesFrom(input, _repeated_keystrokes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportTimeTrialResponse : pb::IMessage<ReportTimeTrialResponse> {
    private static readonly pb::MessageParser<ReportTimeTrialResponse> _parser = new pb::MessageParser<ReportTimeTrialResponse>(() => new ReportTimeTrialResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportTimeTrialResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportTimeTrialResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportTimeTrialResponse(ReportTimeTrialResponse other) : this() {
      time_ = other.time_;
      wpm_ = other.wpm_;
      accuracy_ = other.accuracy_;
      bestRunTime_ = other.bestRunTime_;
      bestRunWpm_ = other.bestRunWpm_;
      bestRunAccuracy_ = other.bestRunAccuracy_;
      rawWpmBySecond_ = other.rawWpmBySecond_.Clone();
      wpmBySecond_ = other.wpmBySecond_.Clone();
      errorsAtTime_ = other.errorsAtTime_.Clone();
      globalTimes_ = other.globalTimes_.Clone();
      globalWpm_ = other.globalWpm_.Clone();
      numErrors_ = other.numErrors_;
      p99Time_ = other.p99Time_;
      p90Time_ = other.p90Time_;
      p50Time_ = other.p50Time_;
      p25Time_ = other.p25Time_;
      p99Wpm_ = other.p99Wpm_;
      p90Wpm_ = other.p90Wpm_;
      p50Wpm_ = other.p50Wpm_;
      p25Wpm_ = other.p25Wpm_;
      percentile_ = other.percentile_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportTimeTrialResponse Clone() {
      return new ReportTimeTrialResponse(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "wpm" field.</summary>
    public const int WpmFieldNumber = 2;
    private float wpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Wpm {
      get { return wpm_; }
      set {
        wpm_ = value;
      }
    }

    /// <summary>Field number for the "accuracy" field.</summary>
    public const int AccuracyFieldNumber = 3;
    private float accuracy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Accuracy {
      get { return accuracy_; }
      set {
        accuracy_ = value;
      }
    }

    /// <summary>Field number for the "best_run_time" field.</summary>
    public const int BestRunTimeFieldNumber = 4;
    private float bestRunTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BestRunTime {
      get { return bestRunTime_; }
      set {
        bestRunTime_ = value;
      }
    }

    /// <summary>Field number for the "best_run_wpm" field.</summary>
    public const int BestRunWpmFieldNumber = 5;
    private float bestRunWpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BestRunWpm {
      get { return bestRunWpm_; }
      set {
        bestRunWpm_ = value;
      }
    }

    /// <summary>Field number for the "best_run_accuracy" field.</summary>
    public const int BestRunAccuracyFieldNumber = 6;
    private float bestRunAccuracy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BestRunAccuracy {
      get { return bestRunAccuracy_; }
      set {
        bestRunAccuracy_ = value;
      }
    }

    /// <summary>Field number for the "raw_wpm_by_second" field.</summary>
    public const int RawWpmBySecondFieldNumber = 7;
    private static readonly pb::FieldCodec<float> _repeated_rawWpmBySecond_codec
        = pb::FieldCodec.ForFloat(58);
    private readonly pbc::RepeatedField<float> rawWpmBySecond_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> RawWpmBySecond {
      get { return rawWpmBySecond_; }
    }

    /// <summary>Field number for the "wpm_by_second" field.</summary>
    public const int WpmBySecondFieldNumber = 8;
    private static readonly pb::FieldCodec<float> _repeated_wpmBySecond_codec
        = pb::FieldCodec.ForFloat(66);
    private readonly pbc::RepeatedField<float> wpmBySecond_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> WpmBySecond {
      get { return wpmBySecond_; }
    }

    /// <summary>Field number for the "errors_at_time" field.</summary>
    public const int ErrorsAtTimeFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Schema.ErrorsAtTime> _repeated_errorsAtTime_codec
        = pb::FieldCodec.ForMessage(74, global::Schema.ErrorsAtTime.Parser);
    private readonly pbc::RepeatedField<global::Schema.ErrorsAtTime> errorsAtTime_ = new pbc::RepeatedField<global::Schema.ErrorsAtTime>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Schema.ErrorsAtTime> ErrorsAtTime {
      get { return errorsAtTime_; }
    }

    /// <summary>Field number for the "global_times" field.</summary>
    public const int GlobalTimesFieldNumber = 10;
    private static readonly pbc::MapField<string, int>.Codec _map_globalTimes_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt32(16), 82);
    private readonly pbc::MapField<string, int> globalTimes_ = new pbc::MapField<string, int>();
    /// <summary>
    /// String key to avoid 0 key errors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> GlobalTimes {
      get { return globalTimes_; }
    }

    /// <summary>Field number for the "global_wpm" field.</summary>
    public const int GlobalWpmFieldNumber = 11;
    private static readonly pbc::MapField<int, int>.Codec _map_globalWpm_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 90);
    private readonly pbc::MapField<int, int> globalWpm_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> GlobalWpm {
      get { return globalWpm_; }
    }

    /// <summary>Field number for the "num_errors" field.</summary>
    public const int NumErrorsFieldNumber = 12;
    private int numErrors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumErrors {
      get { return numErrors_; }
      set {
        numErrors_ = value;
      }
    }

    /// <summary>Field number for the "p99_time" field.</summary>
    public const int P99TimeFieldNumber = 13;
    private float p99Time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float P99Time {
      get { return p99Time_; }
      set {
        p99Time_ = value;
      }
    }

    /// <summary>Field number for the "p90_time" field.</summary>
    public const int P90TimeFieldNumber = 14;
    private float p90Time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float P90Time {
      get { return p90Time_; }
      set {
        p90Time_ = value;
      }
    }

    /// <summary>Field number for the "p50_time" field.</summary>
    public const int P50TimeFieldNumber = 15;
    private float p50Time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float P50Time {
      get { return p50Time_; }
      set {
        p50Time_ = value;
      }
    }

    /// <summary>Field number for the "p25_time" field.</summary>
    public const int P25TimeFieldNumber = 16;
    private float p25Time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float P25Time {
      get { return p25Time_; }
      set {
        p25Time_ = value;
      }
    }

    /// <summary>Field number for the "p99_wpm" field.</summary>
    public const int P99WpmFieldNumber = 17;
    private float p99Wpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float P99Wpm {
      get { return p99Wpm_; }
      set {
        p99Wpm_ = value;
      }
    }

    /// <summary>Field number for the "p90_wpm" field.</summary>
    public const int P90WpmFieldNumber = 18;
    private float p90Wpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float P90Wpm {
      get { return p90Wpm_; }
      set {
        p90Wpm_ = value;
      }
    }

    /// <summary>Field number for the "p50_wpm" field.</summary>
    public const int P50WpmFieldNumber = 19;
    private float p50Wpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float P50Wpm {
      get { return p50Wpm_; }
      set {
        p50Wpm_ = value;
      }
    }

    /// <summary>Field number for the "p25_wpm" field.</summary>
    public const int P25WpmFieldNumber = 20;
    private float p25Wpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float P25Wpm {
      get { return p25Wpm_; }
      set {
        p25Wpm_ = value;
      }
    }

    /// <summary>Field number for the "percentile" field.</summary>
    public const int PercentileFieldNumber = 21;
    private float percentile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Percentile {
      get { return percentile_; }
      set {
        percentile_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportTimeTrialResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportTimeTrialResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Wpm, other.Wpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Accuracy, other.Accuracy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BestRunTime, other.BestRunTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BestRunWpm, other.BestRunWpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BestRunAccuracy, other.BestRunAccuracy)) return false;
      if(!rawWpmBySecond_.Equals(other.rawWpmBySecond_)) return false;
      if(!wpmBySecond_.Equals(other.wpmBySecond_)) return false;
      if(!errorsAtTime_.Equals(other.errorsAtTime_)) return false;
      if (!GlobalTimes.Equals(other.GlobalTimes)) return false;
      if (!GlobalWpm.Equals(other.GlobalWpm)) return false;
      if (NumErrors != other.NumErrors) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(P99Time, other.P99Time)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(P90Time, other.P90Time)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(P50Time, other.P50Time)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(P25Time, other.P25Time)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(P99Wpm, other.P99Wpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(P90Wpm, other.P90Wpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(P50Wpm, other.P50Wpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(P25Wpm, other.P25Wpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Percentile, other.Percentile)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (Wpm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Wpm);
      if (Accuracy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Accuracy);
      if (BestRunTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BestRunTime);
      if (BestRunWpm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BestRunWpm);
      if (BestRunAccuracy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BestRunAccuracy);
      hash ^= rawWpmBySecond_.GetHashCode();
      hash ^= wpmBySecond_.GetHashCode();
      hash ^= errorsAtTime_.GetHashCode();
      hash ^= GlobalTimes.GetHashCode();
      hash ^= GlobalWpm.GetHashCode();
      if (NumErrors != 0) hash ^= NumErrors.GetHashCode();
      if (P99Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(P99Time);
      if (P90Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(P90Time);
      if (P50Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(P50Time);
      if (P25Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(P25Time);
      if (P99Wpm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(P99Wpm);
      if (P90Wpm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(P90Wpm);
      if (P50Wpm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(P50Wpm);
      if (P25Wpm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(P25Wpm);
      if (Percentile != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Percentile);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Time);
      }
      if (Wpm != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Wpm);
      }
      if (Accuracy != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Accuracy);
      }
      if (BestRunTime != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(BestRunTime);
      }
      if (BestRunWpm != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(BestRunWpm);
      }
      if (BestRunAccuracy != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(BestRunAccuracy);
      }
      rawWpmBySecond_.WriteTo(output, _repeated_rawWpmBySecond_codec);
      wpmBySecond_.WriteTo(output, _repeated_wpmBySecond_codec);
      errorsAtTime_.WriteTo(output, _repeated_errorsAtTime_codec);
      globalTimes_.WriteTo(output, _map_globalTimes_codec);
      globalWpm_.WriteTo(output, _map_globalWpm_codec);
      if (NumErrors != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(NumErrors);
      }
      if (P99Time != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(P99Time);
      }
      if (P90Time != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(P90Time);
      }
      if (P50Time != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(P50Time);
      }
      if (P25Time != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(P25Time);
      }
      if (P99Wpm != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(P99Wpm);
      }
      if (P90Wpm != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(P90Wpm);
      }
      if (P50Wpm != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(P50Wpm);
      }
      if (P25Wpm != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(P25Wpm);
      }
      if (Percentile != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(Percentile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (Wpm != 0F) {
        size += 1 + 4;
      }
      if (Accuracy != 0F) {
        size += 1 + 4;
      }
      if (BestRunTime != 0F) {
        size += 1 + 4;
      }
      if (BestRunWpm != 0F) {
        size += 1 + 4;
      }
      if (BestRunAccuracy != 0F) {
        size += 1 + 4;
      }
      size += rawWpmBySecond_.CalculateSize(_repeated_rawWpmBySecond_codec);
      size += wpmBySecond_.CalculateSize(_repeated_wpmBySecond_codec);
      size += errorsAtTime_.CalculateSize(_repeated_errorsAtTime_codec);
      size += globalTimes_.CalculateSize(_map_globalTimes_codec);
      size += globalWpm_.CalculateSize(_map_globalWpm_codec);
      if (NumErrors != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumErrors);
      }
      if (P99Time != 0F) {
        size += 1 + 4;
      }
      if (P90Time != 0F) {
        size += 1 + 4;
      }
      if (P50Time != 0F) {
        size += 1 + 4;
      }
      if (P25Time != 0F) {
        size += 2 + 4;
      }
      if (P99Wpm != 0F) {
        size += 2 + 4;
      }
      if (P90Wpm != 0F) {
        size += 2 + 4;
      }
      if (P50Wpm != 0F) {
        size += 2 + 4;
      }
      if (P25Wpm != 0F) {
        size += 2 + 4;
      }
      if (Percentile != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportTimeTrialResponse other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.Wpm != 0F) {
        Wpm = other.Wpm;
      }
      if (other.Accuracy != 0F) {
        Accuracy = other.Accuracy;
      }
      if (other.BestRunTime != 0F) {
        BestRunTime = other.BestRunTime;
      }
      if (other.BestRunWpm != 0F) {
        BestRunWpm = other.BestRunWpm;
      }
      if (other.BestRunAccuracy != 0F) {
        BestRunAccuracy = other.BestRunAccuracy;
      }
      rawWpmBySecond_.Add(other.rawWpmBySecond_);
      wpmBySecond_.Add(other.wpmBySecond_);
      errorsAtTime_.Add(other.errorsAtTime_);
      globalTimes_.Add(other.globalTimes_);
      globalWpm_.Add(other.globalWpm_);
      if (other.NumErrors != 0) {
        NumErrors = other.NumErrors;
      }
      if (other.P99Time != 0F) {
        P99Time = other.P99Time;
      }
      if (other.P90Time != 0F) {
        P90Time = other.P90Time;
      }
      if (other.P50Time != 0F) {
        P50Time = other.P50Time;
      }
      if (other.P25Time != 0F) {
        P25Time = other.P25Time;
      }
      if (other.P99Wpm != 0F) {
        P99Wpm = other.P99Wpm;
      }
      if (other.P90Wpm != 0F) {
        P90Wpm = other.P90Wpm;
      }
      if (other.P50Wpm != 0F) {
        P50Wpm = other.P50Wpm;
      }
      if (other.P25Wpm != 0F) {
        P25Wpm = other.P25Wpm;
      }
      if (other.Percentile != 0F) {
        Percentile = other.Percentile;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Time = input.ReadFloat();
            break;
          }
          case 21: {
            Wpm = input.ReadFloat();
            break;
          }
          case 29: {
            Accuracy = input.ReadFloat();
            break;
          }
          case 37: {
            BestRunTime = input.ReadFloat();
            break;
          }
          case 45: {
            BestRunWpm = input.ReadFloat();
            break;
          }
          case 53: {
            BestRunAccuracy = input.ReadFloat();
            break;
          }
          case 58:
          case 61: {
            rawWpmBySecond_.AddEntriesFrom(input, _repeated_rawWpmBySecond_codec);
            break;
          }
          case 66:
          case 69: {
            wpmBySecond_.AddEntriesFrom(input, _repeated_wpmBySecond_codec);
            break;
          }
          case 74: {
            errorsAtTime_.AddEntriesFrom(input, _repeated_errorsAtTime_codec);
            break;
          }
          case 82: {
            globalTimes_.AddEntriesFrom(input, _map_globalTimes_codec);
            break;
          }
          case 90: {
            globalWpm_.AddEntriesFrom(input, _map_globalWpm_codec);
            break;
          }
          case 96: {
            NumErrors = input.ReadInt32();
            break;
          }
          case 109: {
            P99Time = input.ReadFloat();
            break;
          }
          case 117: {
            P90Time = input.ReadFloat();
            break;
          }
          case 125: {
            P50Time = input.ReadFloat();
            break;
          }
          case 133: {
            P25Time = input.ReadFloat();
            break;
          }
          case 141: {
            P99Wpm = input.ReadFloat();
            break;
          }
          case 149: {
            P90Wpm = input.ReadFloat();
            break;
          }
          case 157: {
            P50Wpm = input.ReadFloat();
            break;
          }
          case 165: {
            P25Wpm = input.ReadFloat();
            break;
          }
          case 173: {
            Percentile = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthenticatedAuthInfo : pb::IMessage<AuthenticatedAuthInfo> {
    private static readonly pb::MessageParser<AuthenticatedAuthInfo> _parser = new pb::MessageParser<AuthenticatedAuthInfo>(() => new AuthenticatedAuthInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticatedAuthInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticatedAuthInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticatedAuthInfo(AuthenticatedAuthInfo other) : this() {
      provider_ = other.provider_;
      externalId_ = other.externalId_;
      email_ = other.email_;
      lastLoginAt_ = other.lastLoginAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticatedAuthInfo Clone() {
      return new AuthenticatedAuthInfo(this);
    }

    /// <summary>Field number for the "provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private string provider_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Provider {
      get { return provider_; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "external_id" field.</summary>
    public const int ExternalIdFieldNumber = 2;
    private string externalId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalId {
      get { return externalId_; }
      set {
        externalId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 3;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_login_at" field.</summary>
    public const int LastLoginAtFieldNumber = 4;
    private double lastLoginAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastLoginAt {
      get { return lastLoginAt_; }
      set {
        lastLoginAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticatedAuthInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticatedAuthInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      if (ExternalId != other.ExternalId) return false;
      if (Email != other.Email) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastLoginAt, other.LastLoginAt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider.Length != 0) hash ^= Provider.GetHashCode();
      if (ExternalId.Length != 0) hash ^= ExternalId.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (LastLoginAt != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastLoginAt);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Provider.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Provider);
      }
      if (ExternalId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExternalId);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
      if (LastLoginAt != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LastLoginAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      if (ExternalId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalId);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (LastLoginAt != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticatedAuthInfo other) {
      if (other == null) {
        return;
      }
      if (other.Provider.Length != 0) {
        Provider = other.Provider;
      }
      if (other.ExternalId.Length != 0) {
        ExternalId = other.ExternalId;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.LastLoginAt != 0D) {
        LastLoginAt = other.LastLoginAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Provider = input.ReadString();
            break;
          }
          case 18: {
            ExternalId = input.ReadString();
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
          case 33: {
            LastLoginAt = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnonAuthInfo : pb::IMessage<AnonAuthInfo> {
    private static readonly pb::MessageParser<AnonAuthInfo> _parser = new pb::MessageParser<AnonAuthInfo>(() => new AnonAuthInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnonAuthInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnonAuthInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnonAuthInfo(AnonAuthInfo other) : this() {
      authToken_ = other.authToken_;
      lastLoginAt_ = other.lastLoginAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnonAuthInfo Clone() {
      return new AnonAuthInfo(this);
    }

    /// <summary>Field number for the "auth_token" field.</summary>
    public const int AuthTokenFieldNumber = 1;
    private string authToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthToken {
      get { return authToken_; }
      set {
        authToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_login_at" field.</summary>
    public const int LastLoginAtFieldNumber = 2;
    private double lastLoginAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastLoginAt {
      get { return lastLoginAt_; }
      set {
        lastLoginAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnonAuthInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnonAuthInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AuthToken != other.AuthToken) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastLoginAt, other.LastLoginAt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AuthToken.Length != 0) hash ^= AuthToken.GetHashCode();
      if (LastLoginAt != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastLoginAt);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AuthToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AuthToken);
      }
      if (LastLoginAt != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(LastLoginAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AuthToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthToken);
      }
      if (LastLoginAt != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnonAuthInfo other) {
      if (other == null) {
        return;
      }
      if (other.AuthToken.Length != 0) {
        AuthToken = other.AuthToken;
      }
      if (other.LastLoginAt != 0D) {
        LastLoginAt = other.LastLoginAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AuthToken = input.ReadString();
            break;
          }
          case 17: {
            LastLoginAt = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.ProtosReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      createdS_ = other.createdS_;
      authenticatedAuthInfo_ = other.authenticatedAuthInfo_ != null ? other.authenticatedAuthInfo_.Clone() : null;
      anonAuthInfo_ = other.anonAuthInfo_ != null ? other.anonAuthInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int idFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Schema.PlayerAuthType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Schema.PlayerAuthType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "created_s" field.</summary>
    public const int CreatedSFieldNumber = 3;
    private double createdS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CreatedS {
      get { return createdS_; }
      set {
        createdS_ = value;
      }
    }

    /// <summary>Field number for the "authenticated_auth_info" field.</summary>
    public const int AuthenticatedAuthInfoFieldNumber = 4;
    private global::Schema.AuthenticatedAuthInfo authenticatedAuthInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Schema.AuthenticatedAuthInfo AuthenticatedAuthInfo {
      get { return authenticatedAuthInfo_; }
      set {
        authenticatedAuthInfo_ = value;
      }
    }

    /// <summary>Field number for the "anon_auth_info" field.</summary>
    public const int AnonAuthInfoFieldNumber = 5;
    private global::Schema.AnonAuthInfo anonAuthInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Schema.AnonAuthInfo AnonAuthInfo {
      get { return anonAuthInfo_; }
      set {
        anonAuthInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (id != other.id) return false;
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CreatedS, other.CreatedS)) return false;
      if (!object.Equals(AuthenticatedAuthInfo, other.AuthenticatedAuthInfo)) return false;
      if (!object.Equals(AnonAuthInfo, other.AnonAuthInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id.Length != 0) hash ^= id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (CreatedS != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CreatedS);
      if (authenticatedAuthInfo_ != null) hash ^= AuthenticatedAuthInfo.GetHashCode();
      if (anonAuthInfo_ != null) hash ^= AnonAuthInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (CreatedS != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(CreatedS);
      }
      if (authenticatedAuthInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AuthenticatedAuthInfo);
      }
      if (anonAuthInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AnonAuthInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (CreatedS != 0D) {
        size += 1 + 8;
      }
      if (authenticatedAuthInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthenticatedAuthInfo);
      }
      if (anonAuthInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnonAuthInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.id.Length != 0) {
        id = other.id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.CreatedS != 0D) {
        CreatedS = other.CreatedS;
      }
      if (other.authenticatedAuthInfo_ != null) {
        if (authenticatedAuthInfo_ == null) {
          authenticatedAuthInfo_ = new global::Schema.AuthenticatedAuthInfo();
        }
        AuthenticatedAuthInfo.MergeFrom(other.AuthenticatedAuthInfo);
      }
      if (other.anonAuthInfo_ != null) {
        if (anonAuthInfo_ == null) {
          anonAuthInfo_ = new global::Schema.AnonAuthInfo();
        }
        AnonAuthInfo.MergeFrom(other.AnonAuthInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            id = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::Schema.PlayerAuthType) input.ReadEnum();
            break;
          }
          case 25: {
            CreatedS = input.ReadDouble();
            break;
          }
          case 34: {
            if (authenticatedAuthInfo_ == null) {
              authenticatedAuthInfo_ = new global::Schema.AuthenticatedAuthInfo();
            }
            input.ReadMessage(authenticatedAuthInfo_);
            break;
          }
          case 42: {
            if (anonAuthInfo_ == null) {
              anonAuthInfo_ = new global::Schema.AnonAuthInfo();
            }
            input.ReadMessage(anonAuthInfo_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
