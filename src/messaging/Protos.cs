// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LightspeedTyperacing
{

  /// <summary>Holder for reflection information generated from protos.proto</summary>
  public static partial class ProtosReflection
  {

    #region Descriptor
    /// <summary>File descriptor for protos.proto</summary>
    public static pbr::FileDescriptor Descriptor
    {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtosReflection()
    {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxwcm90b3MucHJvdG8SFExpZ2h0c3BlZWRUeXBlcmFjaW5nIqQBCgxPbmVv",
            "ZlJlcXVlc3QSEQoJc2VuZGVyX2lkGAEgASgJEjoKCWZpbmRfZ2FtZRgCIAEo",
            "CzIlLkxpZ2h0c3BlZWRUeXBlcmFjaW5nLkZpbmRHYW1lUmVxdWVzdEgAEjoK",
            "CXR5cGVfd29yZBgDIAEoCzIlLkxpZ2h0c3BlZWRUeXBlcmFjaW5nLlR5cGVX",
            "b3JkUmVxdWVzdEgAQgkKB3JlcXVlc3QiJgoPRmluZEdhbWVSZXF1ZXN0EhMK",
            "C3BsYXllcl9uYW1lGAEgASgJIh8KD1R5cGVXb3JkUmVxdWVzdBIMCgR3b3Jk",
            "GAEgASgJIqADCgtPbmVvZlVwZGF0ZRIUCgxyZWNpcGllbnRfaWQYASABKAkS",
            "MwoJZ2FtZV9vdmVyGAIgASgLMh4uTGlnaHRzcGVlZFR5cGVyYWNpbmcuR2Ft",
            "ZU92ZXJIABI5CgxnYW1lX3N0YXJ0ZWQYAyABKAsyIS5MaWdodHNwZWVkVHlw",
            "ZXJhY2luZy5HYW1lU3RhcnRlZEgAEjsKDWdhbWVfc3RhcnRpbmcYBCABKAsy",
            "Ii5MaWdodHNwZWVkVHlwZXJhY2luZy5HYW1lU3RhcnRpbmdIABJBChBwbGF5",
            "ZXJfY29tcGxldGVkGAUgASgLMiUuTGlnaHRzcGVlZFR5cGVyYWNpbmcuUGxh",
            "eWVyQ29tcGxldGVkSAASRAoScGxheWVyX2pvaW5lZF9nYW1lGAYgASgLMiYu",
            "TGlnaHRzcGVlZFR5cGVyYWNpbmcuUGxheWVySm9pbmVkR2FtZUgAEjsKDXdv",
            "cmRfZmluaXNoZWQYByABKAsyIi5MaWdodHNwZWVkVHlwZXJhY2luZy5Xb3Jk",
            "RmluaXNoZWRIAEIICgZ1cGRhdGUiCgoIR2FtZU92ZXIiDQoLR2FtZVN0YXJ0",
            "ZWQiMQoMR2FtZVN0YXJ0aW5nEhEKCWNvdW50ZG93bhgBIAEoAhIOCgZwaHJh",
            "c2UYAiABKAkiMwoPUGxheWVyQ29tcGxldGVkEhEKCXBsYXllcl9pZBgBIAEo",
            "CRINCgVwbGFjZRgCIAEoBSJLChBQbGF5ZXJKb2luZWRHYW1lEhEKCXBsYXll",
            "cl9pZBgBIAEoCRITCgtwbGF5ZXJfbmFtZRgCIAEoCRIPCgdnYW1lX2lkGAMg",
            "ASgJIjsKDFdvcmRGaW5pc2hlZBIRCglwbGF5ZXJfaWQYASABKAkSGAoQcGVy",
            "Y2VudF9jb21wbGV0ZRgCIAEoAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LightspeedTyperacing.OneofRequest), global::LightspeedTyperacing.OneofRequest.Parser, new[]{ "SenderId", "FindGame", "TypeWord" }, new[]{ "Request" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightspeedTyperacing.FindGameRequest), global::LightspeedTyperacing.FindGameRequest.Parser, new[]{ "PlayerName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightspeedTyperacing.TypeWordRequest), global::LightspeedTyperacing.TypeWordRequest.Parser, new[]{ "Word" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightspeedTyperacing.OneofUpdate), global::LightspeedTyperacing.OneofUpdate.Parser, new[]{ "RecipientId", "GameOver", "GameStarted", "GameStarting", "PlayerCompleted", "PlayerJoinedGame", "WordFinished" }, new[]{ "Update" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightspeedTyperacing.GameOver), global::LightspeedTyperacing.GameOver.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightspeedTyperacing.GameStarted), global::LightspeedTyperacing.GameStarted.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightspeedTyperacing.GameStarting), global::LightspeedTyperacing.GameStarting.Parser, new[]{ "Countdown", "Phrase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightspeedTyperacing.PlayerCompleted), global::LightspeedTyperacing.PlayerCompleted.Parser, new[]{ "PlayerId", "Place" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightspeedTyperacing.PlayerJoinedGame), global::LightspeedTyperacing.PlayerJoinedGame.Parser, new[]{ "PlayerId", "PlayerName", "GameId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightspeedTyperacing.WordFinished), global::LightspeedTyperacing.WordFinished.Parser, new[]{ "PlayerId", "PercentComplete" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class OneofRequest : pb::IMessage<OneofRequest>
  {
    private static readonly pb::MessageParser<OneofRequest> _parser = new pb::MessageParser<OneofRequest>(() => new OneofRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneofRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::LightspeedTyperacing.ProtosReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofRequest()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofRequest(OneofRequest other) : this()
    {
      senderId_ = other.senderId_;
      switch (other.RequestCase)
      {
        case RequestOneofCase.FindGame:
          FindGame = other.FindGame.Clone();
          break;
        case RequestOneofCase.TypeWord:
          TypeWord = other.TypeWord.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofRequest Clone()
    {
      return new OneofRequest(this);
    }

    /// <summary>Field number for the "sender_id" field.</summary>
    public const int SenderIdFieldNumber = 1;
    private string senderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderId
    {
      get { return senderId_; }
      set
      {
        senderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "find_game" field.</summary>
    public const int FindGameFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LightspeedTyperacing.FindGameRequest FindGame
    {
      get { return requestCase_ == RequestOneofCase.FindGame ? (global::LightspeedTyperacing.FindGameRequest)request_ : null; }
      set
      {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.FindGame;
      }
    }

    /// <summary>Field number for the "type_word" field.</summary>
    public const int TypeWordFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LightspeedTyperacing.TypeWordRequest TypeWord
    {
      get { return requestCase_ == RequestOneofCase.TypeWord ? (global::LightspeedTyperacing.TypeWordRequest)request_ : null; }
      set
      {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.TypeWord;
      }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "request" oneof.</summary>
    public enum RequestOneofCase
    {
      None = 0,
      FindGame = 2,
      TypeWord = 3,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOneofCase RequestCase
    {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest()
    {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
      return Equals(other as OneofRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneofRequest other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (SenderId != other.SenderId) return false;
      if (!object.Equals(FindGame, other.FindGame)) return false;
      if (!object.Equals(TypeWord, other.TypeWord)) return false;
      if (RequestCase != other.RequestCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
      int hash = 1;
      if (SenderId.Length != 0) hash ^= SenderId.GetHashCode();
      if (requestCase_ == RequestOneofCase.FindGame) hash ^= FindGame.GetHashCode();
      if (requestCase_ == RequestOneofCase.TypeWord) hash ^= TypeWord.GetHashCode();
      hash ^= (int)requestCase_;
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
      if (SenderId.Length != 0)
      {
        output.WriteRawTag(10);
        output.WriteString(SenderId);
      }
      if (requestCase_ == RequestOneofCase.FindGame)
      {
        output.WriteRawTag(18);
        output.WriteMessage(FindGame);
      }
      if (requestCase_ == RequestOneofCase.TypeWord)
      {
        output.WriteRawTag(26);
        output.WriteMessage(TypeWord);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
      int size = 0;
      if (SenderId.Length != 0)
      {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderId);
      }
      if (requestCase_ == RequestOneofCase.FindGame)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FindGame);
      }
      if (requestCase_ == RequestOneofCase.TypeWord)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypeWord);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneofRequest other)
    {
      if (other == null)
      {
        return;
      }
      if (other.SenderId.Length != 0)
      {
        SenderId = other.SenderId;
      }
      switch (other.RequestCase)
      {
        case RequestOneofCase.FindGame:
          if (FindGame == null)
          {
            FindGame = new global::LightspeedTyperacing.FindGameRequest();
          }
          FindGame.MergeFrom(other.FindGame);
          break;
        case RequestOneofCase.TypeWord:
          if (TypeWord == null)
          {
            TypeWord = new global::LightspeedTyperacing.TypeWordRequest();
          }
          TypeWord.MergeFrom(other.TypeWord);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
            {
              SenderId = input.ReadString();
              break;
            }
          case 18:
            {
              global::LightspeedTyperacing.FindGameRequest subBuilder = new global::LightspeedTyperacing.FindGameRequest();
              if (requestCase_ == RequestOneofCase.FindGame)
              {
                subBuilder.MergeFrom(FindGame);
              }
              input.ReadMessage(subBuilder);
              FindGame = subBuilder;
              break;
            }
          case 26:
            {
              global::LightspeedTyperacing.TypeWordRequest subBuilder = new global::LightspeedTyperacing.TypeWordRequest();
              if (requestCase_ == RequestOneofCase.TypeWord)
              {
                subBuilder.MergeFrom(TypeWord);
              }
              input.ReadMessage(subBuilder);
              TypeWord = subBuilder;
              break;
            }
        }
      }
    }

  }

  public sealed partial class FindGameRequest : pb::IMessage<FindGameRequest>
  {
    private static readonly pb::MessageParser<FindGameRequest> _parser = new pb::MessageParser<FindGameRequest>(() => new FindGameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindGameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::LightspeedTyperacing.ProtosReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindGameRequest()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindGameRequest(FindGameRequest other) : this()
    {
      playerName_ = other.playerName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindGameRequest Clone()
    {
      return new FindGameRequest(this);
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 1;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName
    {
      get { return playerName_; }
      set
      {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
      return Equals(other as FindGameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindGameRequest other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (PlayerName != other.PlayerName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
      int hash = 1;
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
      if (PlayerName.Length != 0)
      {
        output.WriteRawTag(10);
        output.WriteString(PlayerName);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
      int size = 0;
      if (PlayerName.Length != 0)
      {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindGameRequest other)
    {
      if (other == null)
      {
        return;
      }
      if (other.PlayerName.Length != 0)
      {
        PlayerName = other.PlayerName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
            {
              PlayerName = input.ReadString();
              break;
            }
        }
      }
    }

  }

  public sealed partial class TypeWordRequest : pb::IMessage<TypeWordRequest>
  {
    private static readonly pb::MessageParser<TypeWordRequest> _parser = new pb::MessageParser<TypeWordRequest>(() => new TypeWordRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TypeWordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::LightspeedTyperacing.ProtosReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeWordRequest()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeWordRequest(TypeWordRequest other) : this()
    {
      word_ = other.word_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeWordRequest Clone()
    {
      return new TypeWordRequest(this);
    }

    /// <summary>Field number for the "word" field.</summary>
    public const int WordFieldNumber = 1;
    private string word_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Word
    {
      get { return word_; }
      set
      {
        word_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
      return Equals(other as TypeWordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TypeWordRequest other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (Word != other.Word) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
      int hash = 1;
      if (Word.Length != 0) hash ^= Word.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
      if (Word.Length != 0)
      {
        output.WriteRawTag(10);
        output.WriteString(Word);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
      int size = 0;
      if (Word.Length != 0)
      {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Word);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TypeWordRequest other)
    {
      if (other == null)
      {
        return;
      }
      if (other.Word.Length != 0)
      {
        Word = other.Word;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
            {
              Word = input.ReadString();
              break;
            }
        }
      }
    }

  }

  public sealed partial class OneofUpdate : pb::IMessage<OneofUpdate>
  {
    private static readonly pb::MessageParser<OneofUpdate> _parser = new pb::MessageParser<OneofUpdate>(() => new OneofUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneofUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::LightspeedTyperacing.ProtosReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofUpdate()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofUpdate(OneofUpdate other) : this()
    {
      recipientId_ = other.recipientId_;
      switch (other.UpdateCase)
      {
        case UpdateOneofCase.GameOver:
          GameOver = other.GameOver.Clone();
          break;
        case UpdateOneofCase.GameStarted:
          GameStarted = other.GameStarted.Clone();
          break;
        case UpdateOneofCase.GameStarting:
          GameStarting = other.GameStarting.Clone();
          break;
        case UpdateOneofCase.PlayerCompleted:
          PlayerCompleted = other.PlayerCompleted.Clone();
          break;
        case UpdateOneofCase.PlayerJoinedGame:
          PlayerJoinedGame = other.PlayerJoinedGame.Clone();
          break;
        case UpdateOneofCase.WordFinished:
          WordFinished = other.WordFinished.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofUpdate Clone()
    {
      return new OneofUpdate(this);
    }

    /// <summary>Field number for the "recipient_id" field.</summary>
    public const int RecipientIdFieldNumber = 1;
    private string recipientId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RecipientId
    {
      get { return recipientId_; }
      set
      {
        recipientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_over" field.</summary>
    public const int GameOverFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LightspeedTyperacing.GameOver GameOver
    {
      get { return updateCase_ == UpdateOneofCase.GameOver ? (global::LightspeedTyperacing.GameOver)update_ : null; }
      set
      {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.GameOver;
      }
    }

    /// <summary>Field number for the "game_started" field.</summary>
    public const int GameStartedFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LightspeedTyperacing.GameStarted GameStarted
    {
      get { return updateCase_ == UpdateOneofCase.GameStarted ? (global::LightspeedTyperacing.GameStarted)update_ : null; }
      set
      {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.GameStarted;
      }
    }

    /// <summary>Field number for the "game_starting" field.</summary>
    public const int GameStartingFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LightspeedTyperacing.GameStarting GameStarting
    {
      get { return updateCase_ == UpdateOneofCase.GameStarting ? (global::LightspeedTyperacing.GameStarting)update_ : null; }
      set
      {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.GameStarting;
      }
    }

    /// <summary>Field number for the "player_completed" field.</summary>
    public const int PlayerCompletedFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LightspeedTyperacing.PlayerCompleted PlayerCompleted
    {
      get { return updateCase_ == UpdateOneofCase.PlayerCompleted ? (global::LightspeedTyperacing.PlayerCompleted)update_ : null; }
      set
      {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.PlayerCompleted;
      }
    }

    /// <summary>Field number for the "player_joined_game" field.</summary>
    public const int PlayerJoinedGameFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LightspeedTyperacing.PlayerJoinedGame PlayerJoinedGame
    {
      get { return updateCase_ == UpdateOneofCase.PlayerJoinedGame ? (global::LightspeedTyperacing.PlayerJoinedGame)update_ : null; }
      set
      {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.PlayerJoinedGame;
      }
    }

    /// <summary>Field number for the "word_finished" field.</summary>
    public const int WordFinishedFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LightspeedTyperacing.WordFinished WordFinished
    {
      get { return updateCase_ == UpdateOneofCase.WordFinished ? (global::LightspeedTyperacing.WordFinished)update_ : null; }
      set
      {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.WordFinished;
      }
    }

    private object update_;
    /// <summary>Enum of possible cases for the "update" oneof.</summary>
    public enum UpdateOneofCase
    {
      None = 0,
      GameOver = 2,
      GameStarted = 3,
      GameStarting = 4,
      PlayerCompleted = 5,
      PlayerJoinedGame = 6,
      WordFinished = 7,
    }
    private UpdateOneofCase updateCase_ = UpdateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOneofCase UpdateCase
    {
      get { return updateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUpdate()
    {
      updateCase_ = UpdateOneofCase.None;
      update_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
      return Equals(other as OneofUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneofUpdate other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (RecipientId != other.RecipientId) return false;
      if (!object.Equals(GameOver, other.GameOver)) return false;
      if (!object.Equals(GameStarted, other.GameStarted)) return false;
      if (!object.Equals(GameStarting, other.GameStarting)) return false;
      if (!object.Equals(PlayerCompleted, other.PlayerCompleted)) return false;
      if (!object.Equals(PlayerJoinedGame, other.PlayerJoinedGame)) return false;
      if (!object.Equals(WordFinished, other.WordFinished)) return false;
      if (UpdateCase != other.UpdateCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
      int hash = 1;
      if (RecipientId.Length != 0) hash ^= RecipientId.GetHashCode();
      if (updateCase_ == UpdateOneofCase.GameOver) hash ^= GameOver.GetHashCode();
      if (updateCase_ == UpdateOneofCase.GameStarted) hash ^= GameStarted.GetHashCode();
      if (updateCase_ == UpdateOneofCase.GameStarting) hash ^= GameStarting.GetHashCode();
      if (updateCase_ == UpdateOneofCase.PlayerCompleted) hash ^= PlayerCompleted.GetHashCode();
      if (updateCase_ == UpdateOneofCase.PlayerJoinedGame) hash ^= PlayerJoinedGame.GetHashCode();
      if (updateCase_ == UpdateOneofCase.WordFinished) hash ^= WordFinished.GetHashCode();
      hash ^= (int)updateCase_;
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
      if (RecipientId.Length != 0)
      {
        output.WriteRawTag(10);
        output.WriteString(RecipientId);
      }
      if (updateCase_ == UpdateOneofCase.GameOver)
      {
        output.WriteRawTag(18);
        output.WriteMessage(GameOver);
      }
      if (updateCase_ == UpdateOneofCase.GameStarted)
      {
        output.WriteRawTag(26);
        output.WriteMessage(GameStarted);
      }
      if (updateCase_ == UpdateOneofCase.GameStarting)
      {
        output.WriteRawTag(34);
        output.WriteMessage(GameStarting);
      }
      if (updateCase_ == UpdateOneofCase.PlayerCompleted)
      {
        output.WriteRawTag(42);
        output.WriteMessage(PlayerCompleted);
      }
      if (updateCase_ == UpdateOneofCase.PlayerJoinedGame)
      {
        output.WriteRawTag(50);
        output.WriteMessage(PlayerJoinedGame);
      }
      if (updateCase_ == UpdateOneofCase.WordFinished)
      {
        output.WriteRawTag(58);
        output.WriteMessage(WordFinished);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
      int size = 0;
      if (RecipientId.Length != 0)
      {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RecipientId);
      }
      if (updateCase_ == UpdateOneofCase.GameOver)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameOver);
      }
      if (updateCase_ == UpdateOneofCase.GameStarted)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameStarted);
      }
      if (updateCase_ == UpdateOneofCase.GameStarting)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameStarting);
      }
      if (updateCase_ == UpdateOneofCase.PlayerCompleted)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerCompleted);
      }
      if (updateCase_ == UpdateOneofCase.PlayerJoinedGame)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerJoinedGame);
      }
      if (updateCase_ == UpdateOneofCase.WordFinished)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WordFinished);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneofUpdate other)
    {
      if (other == null)
      {
        return;
      }
      if (other.RecipientId.Length != 0)
      {
        RecipientId = other.RecipientId;
      }
      switch (other.UpdateCase)
      {
        case UpdateOneofCase.GameOver:
          if (GameOver == null)
          {
            GameOver = new global::LightspeedTyperacing.GameOver();
          }
          GameOver.MergeFrom(other.GameOver);
          break;
        case UpdateOneofCase.GameStarted:
          if (GameStarted == null)
          {
            GameStarted = new global::LightspeedTyperacing.GameStarted();
          }
          GameStarted.MergeFrom(other.GameStarted);
          break;
        case UpdateOneofCase.GameStarting:
          if (GameStarting == null)
          {
            GameStarting = new global::LightspeedTyperacing.GameStarting();
          }
          GameStarting.MergeFrom(other.GameStarting);
          break;
        case UpdateOneofCase.PlayerCompleted:
          if (PlayerCompleted == null)
          {
            PlayerCompleted = new global::LightspeedTyperacing.PlayerCompleted();
          }
          PlayerCompleted.MergeFrom(other.PlayerCompleted);
          break;
        case UpdateOneofCase.PlayerJoinedGame:
          if (PlayerJoinedGame == null)
          {
            PlayerJoinedGame = new global::LightspeedTyperacing.PlayerJoinedGame();
          }
          PlayerJoinedGame.MergeFrom(other.PlayerJoinedGame);
          break;
        case UpdateOneofCase.WordFinished:
          if (WordFinished == null)
          {
            WordFinished = new global::LightspeedTyperacing.WordFinished();
          }
          WordFinished.MergeFrom(other.WordFinished);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
            {
              RecipientId = input.ReadString();
              break;
            }
          case 18:
            {
              global::LightspeedTyperacing.GameOver subBuilder = new global::LightspeedTyperacing.GameOver();
              if (updateCase_ == UpdateOneofCase.GameOver)
              {
                subBuilder.MergeFrom(GameOver);
              }
              input.ReadMessage(subBuilder);
              GameOver = subBuilder;
              break;
            }
          case 26:
            {
              global::LightspeedTyperacing.GameStarted subBuilder = new global::LightspeedTyperacing.GameStarted();
              if (updateCase_ == UpdateOneofCase.GameStarted)
              {
                subBuilder.MergeFrom(GameStarted);
              }
              input.ReadMessage(subBuilder);
              GameStarted = subBuilder;
              break;
            }
          case 34:
            {
              global::LightspeedTyperacing.GameStarting subBuilder = new global::LightspeedTyperacing.GameStarting();
              if (updateCase_ == UpdateOneofCase.GameStarting)
              {
                subBuilder.MergeFrom(GameStarting);
              }
              input.ReadMessage(subBuilder);
              GameStarting = subBuilder;
              break;
            }
          case 42:
            {
              global::LightspeedTyperacing.PlayerCompleted subBuilder = new global::LightspeedTyperacing.PlayerCompleted();
              if (updateCase_ == UpdateOneofCase.PlayerCompleted)
              {
                subBuilder.MergeFrom(PlayerCompleted);
              }
              input.ReadMessage(subBuilder);
              PlayerCompleted = subBuilder;
              break;
            }
          case 50:
            {
              global::LightspeedTyperacing.PlayerJoinedGame subBuilder = new global::LightspeedTyperacing.PlayerJoinedGame();
              if (updateCase_ == UpdateOneofCase.PlayerJoinedGame)
              {
                subBuilder.MergeFrom(PlayerJoinedGame);
              }
              input.ReadMessage(subBuilder);
              PlayerJoinedGame = subBuilder;
              break;
            }
          case 58:
            {
              global::LightspeedTyperacing.WordFinished subBuilder = new global::LightspeedTyperacing.WordFinished();
              if (updateCase_ == UpdateOneofCase.WordFinished)
              {
                subBuilder.MergeFrom(WordFinished);
              }
              input.ReadMessage(subBuilder);
              WordFinished = subBuilder;
              break;
            }
        }
      }
    }

  }

  public sealed partial class GameOver : pb::IMessage<GameOver>
  {
    private static readonly pb::MessageParser<GameOver> _parser = new pb::MessageParser<GameOver>(() => new GameOver());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameOver> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::LightspeedTyperacing.ProtosReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOver()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOver(GameOver other) : this()
    {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOver Clone()
    {
      return new GameOver(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
      return Equals(other as GameOver);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameOver other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
      int hash = 1;
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
      int size = 0;
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameOver other)
    {
      if (other == null)
      {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GameStarted : pb::IMessage<GameStarted>
  {
    private static readonly pb::MessageParser<GameStarted> _parser = new pb::MessageParser<GameStarted>(() => new GameStarted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameStarted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::LightspeedTyperacing.ProtosReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStarted()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStarted(GameStarted other) : this()
    {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStarted Clone()
    {
      return new GameStarted(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
      return Equals(other as GameStarted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameStarted other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
      int hash = 1;
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
      int size = 0;
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameStarted other)
    {
      if (other == null)
      {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GameStarting : pb::IMessage<GameStarting>
  {
    private static readonly pb::MessageParser<GameStarting> _parser = new pb::MessageParser<GameStarting>(() => new GameStarting());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameStarting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::LightspeedTyperacing.ProtosReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStarting()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStarting(GameStarting other) : this()
    {
      countdown_ = other.countdown_;
      phrase_ = other.phrase_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStarting Clone()
    {
      return new GameStarting(this);
    }

    /// <summary>Field number for the "countdown" field.</summary>
    public const int CountdownFieldNumber = 1;
    private float countdown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Countdown
    {
      get { return countdown_; }
      set
      {
        countdown_ = value;
      }
    }

    /// <summary>Field number for the "phrase" field.</summary>
    public const int PhraseFieldNumber = 2;
    private string phrase_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phrase
    {
      get { return phrase_; }
      set
      {
        phrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
      return Equals(other as GameStarting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameStarting other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Countdown, other.Countdown)) return false;
      if (Phrase != other.Phrase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
      int hash = 1;
      if (Countdown != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Countdown);
      if (Phrase.Length != 0) hash ^= Phrase.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
      if (Countdown != 0F)
      {
        output.WriteRawTag(13);
        output.WriteFloat(Countdown);
      }
      if (Phrase.Length != 0)
      {
        output.WriteRawTag(18);
        output.WriteString(Phrase);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
      int size = 0;
      if (Countdown != 0F)
      {
        size += 1 + 4;
      }
      if (Phrase.Length != 0)
      {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phrase);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameStarting other)
    {
      if (other == null)
      {
        return;
      }
      if (other.Countdown != 0F)
      {
        Countdown = other.Countdown;
      }
      if (other.Phrase.Length != 0)
      {
        Phrase = other.Phrase;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13:
            {
              Countdown = input.ReadFloat();
              break;
            }
          case 18:
            {
              Phrase = input.ReadString();
              break;
            }
        }
      }
    }

  }

  public sealed partial class PlayerCompleted : pb::IMessage<PlayerCompleted>
  {
    private static readonly pb::MessageParser<PlayerCompleted> _parser = new pb::MessageParser<PlayerCompleted>(() => new PlayerCompleted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::LightspeedTyperacing.ProtosReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCompleted()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCompleted(PlayerCompleted other) : this()
    {
      playerId_ = other.playerId_;
      place_ = other.place_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCompleted Clone()
    {
      return new PlayerCompleted(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId
    {
      get { return playerId_; }
      set
      {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "place" field.</summary>
    public const int PlaceFieldNumber = 2;
    private int place_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Place
    {
      get { return place_; }
      set
      {
        place_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
      return Equals(other as PlayerCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerCompleted other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Place != other.Place) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (Place != 0) hash ^= Place.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
      if (PlayerId.Length != 0)
      {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (Place != 0)
      {
        output.WriteRawTag(16);
        output.WriteInt32(Place);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
      int size = 0;
      if (PlayerId.Length != 0)
      {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (Place != 0)
      {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Place);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerCompleted other)
    {
      if (other == null)
      {
        return;
      }
      if (other.PlayerId.Length != 0)
      {
        PlayerId = other.PlayerId;
      }
      if (other.Place != 0)
      {
        Place = other.Place;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
            {
              PlayerId = input.ReadString();
              break;
            }
          case 16:
            {
              Place = input.ReadInt32();
              break;
            }
        }
      }
    }

  }

  public sealed partial class PlayerJoinedGame : pb::IMessage<PlayerJoinedGame>
  {
    private static readonly pb::MessageParser<PlayerJoinedGame> _parser = new pb::MessageParser<PlayerJoinedGame>(() => new PlayerJoinedGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerJoinedGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::LightspeedTyperacing.ProtosReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerJoinedGame()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerJoinedGame(PlayerJoinedGame other) : this()
    {
      playerId_ = other.playerId_;
      playerName_ = other.playerName_;
      gameId_ = other.gameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerJoinedGame Clone()
    {
      return new PlayerJoinedGame(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId
    {
      get { return playerId_; }
      set
      {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 2;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName
    {
      get { return playerName_; }
      set
      {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 3;
    private string gameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId
    {
      get { return gameId_; }
      set
      {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
      return Equals(other as PlayerJoinedGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerJoinedGame other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (PlayerName != other.PlayerName) return false;
      if (GameId != other.GameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
      if (PlayerId.Length != 0)
      {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (PlayerName.Length != 0)
      {
        output.WriteRawTag(18);
        output.WriteString(PlayerName);
      }
      if (GameId.Length != 0)
      {
        output.WriteRawTag(26);
        output.WriteString(GameId);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
      int size = 0;
      if (PlayerId.Length != 0)
      {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (PlayerName.Length != 0)
      {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (GameId.Length != 0)
      {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerJoinedGame other)
    {
      if (other == null)
      {
        return;
      }
      if (other.PlayerId.Length != 0)
      {
        PlayerId = other.PlayerId;
      }
      if (other.PlayerName.Length != 0)
      {
        PlayerName = other.PlayerName;
      }
      if (other.GameId.Length != 0)
      {
        GameId = other.GameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
            {
              PlayerId = input.ReadString();
              break;
            }
          case 18:
            {
              PlayerName = input.ReadString();
              break;
            }
          case 26:
            {
              GameId = input.ReadString();
              break;
            }
        }
      }
    }

  }

  public sealed partial class WordFinished : pb::IMessage<WordFinished>
  {
    private static readonly pb::MessageParser<WordFinished> _parser = new pb::MessageParser<WordFinished>(() => new WordFinished());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WordFinished> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::LightspeedTyperacing.ProtosReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WordFinished()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WordFinished(WordFinished other) : this()
    {
      playerId_ = other.playerId_;
      percentComplete_ = other.percentComplete_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WordFinished Clone()
    {
      return new WordFinished(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId
    {
      get { return playerId_; }
      set
      {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "percent_complete" field.</summary>
    public const int PercentCompleteFieldNumber = 2;
    private float percentComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PercentComplete
    {
      get { return percentComplete_; }
      set
      {
        percentComplete_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
      return Equals(other as WordFinished);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WordFinished other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PercentComplete, other.PercentComplete)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (PercentComplete != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PercentComplete);
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
      if (PlayerId.Length != 0)
      {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (PercentComplete != 0F)
      {
        output.WriteRawTag(21);
        output.WriteFloat(PercentComplete);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
      int size = 0;
      if (PlayerId.Length != 0)
      {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (PercentComplete != 0F)
      {
        size += 1 + 4;
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WordFinished other)
    {
      if (other == null)
      {
        return;
      }
      if (other.PlayerId.Length != 0)
      {
        PlayerId = other.PlayerId;
      }
      if (other.PercentComplete != 0F)
      {
        PercentComplete = other.PercentComplete;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
            {
              PlayerId = input.ReadString();
              break;
            }
          case 21:
            {
              PercentComplete = input.ReadFloat();
              break;
            }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
