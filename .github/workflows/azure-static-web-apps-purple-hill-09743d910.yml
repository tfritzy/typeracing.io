name: Azure Static Web Apps CI/CD
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - master
jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PURPLE_HILL_09743D910 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/frontend"
          api_location: ""
          output_location: ""

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PURPLE_HILL_09743D910 }}
          action: "close"

  build_and_deploy_backend:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: registry.digitalocean.com
          username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: registry.digitalocean.com/typeracingio/typeracer:latest
          cache-from: type=registry,ref=registry.digitalocean.com/typeracingio/typeracer:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/typeracingio/typeracer:buildcache,mode=max

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Deploy to droplet
        run: |
          # Get the droplet ID (replace blue with your actual droplet name)
          DROPLET_ID=$(doctl compute droplet list --format ID,Name --no-header | grep blue | awk '{print $1}')

          # Execute commands on the droplet
          doctl compute ssh $DROPLET_ID --ssh-command '
            docker pull registry.digitalocean.com/typeracingio/typeracer:latest && \
            docker stop typeracingio || true && \
            docker rm typeracingio || true && \
            docker run -d \
              --name typeracingio \
              --restart unless-stopped \
              -p 8080:8080 \
              -v /etc/letsencrypt:/etc/letsencrypt:ro \
              registry.digitalocean.com/typeracingio/typeracer:latest
          '
